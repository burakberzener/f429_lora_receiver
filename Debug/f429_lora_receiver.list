
f429_lora_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003268  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ac  080034ac  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034b4  080034b4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080034bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200000b0  0800356c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0800356c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b78  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ae  00000000  00000000  00028c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002a608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  0002ace8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002259e  00000000  00000000  0002b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083b7  00000000  00000000  0004d88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7d9  00000000  00000000  00055c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012541e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d98  00000000  00000000  00125474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003400 	.word	0x08003400

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	08003400 	.word	0x08003400

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fd66 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f808 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f8bc 	bl	8000720 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005a8:	f000 f884 	bl	80006b4 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainApp();
 80005ac:	f000 f91a 	bl	80007e4 <mainApp>
 80005b0:	e7fc      	b.n	80005ac <main+0x14>
	...

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fae6 	bl	8002b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <SystemClock_Config+0xf4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a31      	ldr	r2, [pc, #196]	; (80006a8 <SystemClock_Config+0xf4>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <SystemClock_Config+0xf4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <SystemClock_Config+0xf8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a2a      	ldr	r2, [pc, #168]	; (80006ac <SystemClock_Config+0xf8>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xf8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800062c:	2348      	movs	r3, #72	; 0x48
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000634:	2303      	movs	r3, #3
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f001 f88b 	bl	8001758 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000648:	f000 f8c6 	bl	80007d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2102      	movs	r1, #2
 8000668:	4618      	mov	r0, r3
 800066a:	f001 faed 	bl	8001c48 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000674:	f000 f8b0 	bl	80007d8 <Error_Handler>
  }

  /**Configure the Systick interrupt time
  */
HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000678:	f001 fcae 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 800067c:	4603      	mov	r3, r0
 800067e:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <SystemClock_Config+0xfc>)
 8000680:	fba2 2303 	umull	r2, r3, r2, r3
 8000684:	099b      	lsrs	r3, r3, #6
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fe5f 	bl	800134a <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800068c:	2004      	movs	r0, #4
 800068e:	f000 fe69 	bl	8001364 <HAL_SYSTICK_CLKSourceConfig>

/* SysTick_IRQn interrupt configuration */
HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	f04f 30ff 	mov.w	r0, #4294967295
 800069a:	f000 fe3a 	bl	8001312 <HAL_NVIC_SetPriority>
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000
 80006b0:	10624dd3 	.word	0x10624dd3

080006b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <MX_SPI1_Init+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_SPI1_Init+0x64>)
 80006e8:	2238      	movs	r2, #56	; 0x38
 80006ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_SPI1_Init+0x64>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_SPI1_Init+0x64>)
 8000706:	f001 fc73 	bl	8001ff0 <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f862 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000d8 	.word	0x200000d8
 800071c:	40013000 	.word	0x40013000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0xac>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a27      	ldr	r2, [pc, #156]	; (80007cc <MX_GPIO_Init+0xac>)
 8000730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_GPIO_Init+0xac>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_GPIO_Init+0xac>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <MX_GPIO_Init+0xac>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_GPIO_Init+0xac>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_GPIO_Init+0xac>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <MX_GPIO_Init+0xac>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_GPIO_Init+0xac>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <MX_GPIO_Init+0xb0>)
 8000782:	f000 ffcf 	bl	8001724 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, Reset_Pin|nIrq_Pin|DIO1_Pin|SPI_NSS_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	211e      	movs	r1, #30
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xb4>)
 800078c:	f000 ffca 	bl	8001724 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : RED_LED_Pin */
    GPIO_InitStruct.Pin = RED_LED_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	480a      	ldr	r0, [pc, #40]	; (80007d0 <MX_GPIO_Init+0xb0>)
 80007a6:	f000 fdf9 	bl	800139c <HAL_GPIO_Init>

    /*Configure GPIO pins : Reset_Pin nIrq_Pin DIO1_Pin SPI_NSS_Pin */
    GPIO_InitStruct.Pin = Reset_Pin|nIrq_Pin|DIO1_Pin|SPI_NSS_Pin;
 80007aa:	231e      	movs	r3, #30
 80007ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_GPIO_Init+0xb4>)
 80007be:	f000 fded 	bl	800139c <HAL_GPIO_Init>

}
 80007c2:	bf00      	nop
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40021800 	.word	0x40021800
 80007d4:	40020000 	.word	0x40020000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <mainApp>:
	uchar	:;
	uchar	;
}*/

void mainApp()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	u16 i=0;//,j,k=0,g;
 80007ea:	2300      	movs	r3, #0
 80007ec:	80fb      	strh	r3, [r7, #6]

	SysTime = 0;
 80007ee:	4b45      	ldr	r3, [pc, #276]	; (8000904 <mainApp+0x120>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	801a      	strh	r2, [r3, #0]
	operation_flag = 0x00;
 80007f4:	4b44      	ldr	r3, [pc, #272]	; (8000908 <mainApp+0x124>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
	key1_count = 0x00;
 80007fa:	4b44      	ldr	r3, [pc, #272]	; (800090c <mainApp+0x128>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	mode = 0x01;//lora mode
 8000800:	4b43      	ldr	r3, [pc, #268]	; (8000910 <mainApp+0x12c>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
	Freq_Sel = 0x00;//433M
 8000806:	4b43      	ldr	r3, [pc, #268]	; (8000914 <mainApp+0x130>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
	Power_Sel = 0x00;//
 800080c:	4b42      	ldr	r3, [pc, #264]	; (8000918 <mainApp+0x134>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
	Lora_Rate_Sel = 0x06;//
 8000812:	4b42      	ldr	r3, [pc, #264]	; (800091c <mainApp+0x138>)
 8000814:	2206      	movs	r2, #6
 8000816:	701a      	strb	r2, [r3, #0]
	BandWide_Sel = 0x07;
 8000818:	4b41      	ldr	r3, [pc, #260]	; (8000920 <mainApp+0x13c>)
 800081a:	2207      	movs	r2, #7
 800081c:	701a      	strb	r2, [r3, #0]
	Fsk_Rate_Sel = 0x00;
 800081e:	4b41      	ldr	r3, [pc, #260]	; (8000924 <mainApp+0x140>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]

	RED_LED_L();
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082a:	483f      	ldr	r0, [pc, #252]	; (8000928 <mainApp+0x144>)
 800082c:	f000 ff7a 	bl	8001724 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000834:	f000 fc8c 	bl	8001150 <HAL_Delay>
	RED_LED_H();
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083e:	483a      	ldr	r0, [pc, #232]	; (8000928 <mainApp+0x144>)
 8000840:	f000 ff70 	bl	8001724 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Reset_GPIO_Port,Reset_Pin,GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2102      	movs	r1, #2
 8000848:	4838      	ldr	r0, [pc, #224]	; (800092c <mainApp+0x148>)
 800084a:	f000 ff6b 	bl	8001724 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800084e:	200a      	movs	r0, #10
 8000850:	f000 fc7e 	bl	8001150 <HAL_Delay>
	HAL_GPIO_WritePin(Reset_GPIO_Port,Reset_Pin,GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2102      	movs	r1, #2
 8000858:	4834      	ldr	r0, [pc, #208]	; (800092c <mainApp+0x148>)
 800085a:	f000 ff63 	bl	8001724 <HAL_GPIO_WritePin>

	sx1276_7_8_Config();//
 800085e:	f000 faf3 	bl	8000e48 <sx1276_7_8_Config>
	sx1276_7_8_LoRaEntryRx();
 8000862:	f000 f9ff 	bl	8000c64 <sx1276_7_8_LoRaEntryRx>

	while (1)
	{
		key1_count = 1;
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <mainApp+0x128>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
		switch(key1_count)
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <mainApp+0x128>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d843      	bhi.n	80008fc <mainApp+0x118>
 8000874:	a201      	add	r2, pc, #4	; (adr r2, 800087c <mainApp+0x98>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	0800088d 	.word	0x0800088d
 8000880:	080008c7 	.word	0x080008c7
 8000884:	080008fd 	.word	0x080008fd
 8000888:	080008fd 	.word	0x080008fd
			case 0://lora master Tx

				//if(time_flag & 0x02)//2s time
				{
				//	time_flag &= 0xfd;
					sprintf((char*)sx1276_7_8Data,"Counter From Transmitter : %d\n",i++);
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	80fa      	strh	r2, [r7, #6]
 8000892:	461a      	mov	r2, r3
 8000894:	4926      	ldr	r1, [pc, #152]	; (8000930 <mainApp+0x14c>)
 8000896:	4827      	ldr	r0, [pc, #156]	; (8000934 <mainApp+0x150>)
 8000898:	f002 f984 	bl	8002ba4 <siprintf>
					//printUSB(sx1276_7_8Data);
					RED_LED_H();
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a2:	4821      	ldr	r0, [pc, #132]	; (8000928 <mainApp+0x144>)
 80008a4:	f000 ff3e 	bl	8001724 <HAL_GPIO_WritePin>
					sx1276_7_8_LoRaEntryTx();
 80008a8:	f000 fa6a 	bl	8000d80 <sx1276_7_8_LoRaEntryTx>
					sx1276_7_8_LoRaTxPacket();
 80008ac:	f000 faa6 	bl	8000dfc <sx1276_7_8_LoRaTxPacket>
					RED_LED_L();
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b6:	481c      	ldr	r0, [pc, #112]	; (8000928 <mainApp+0x144>)
 80008b8:	f000 ff34 	bl	8001724 <HAL_GPIO_WritePin>
//				{
//
//					HAL_Delay(100);
//
//				}
				HAL_Delay(1000);
 80008bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c0:	f000 fc46 	bl	8001150 <HAL_Delay>

			break;
 80008c4:	e01d      	b.n	8000902 <mainApp+0x11e>
			case 1://lora slaver Rx

				if(sx1276_7_8_LoRaRxPacket())
 80008c6:	f000 fa13 	bl	8000cf0 <sx1276_7_8_LoRaRxPacket>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d017      	beq.n	8000900 <mainApp+0x11c>
				{
					sprintf(strBuf,"Receive Data %s\n",(char*)RxData);
 80008d0:	4a19      	ldr	r2, [pc, #100]	; (8000938 <mainApp+0x154>)
 80008d2:	491a      	ldr	r1, [pc, #104]	; (800093c <mainApp+0x158>)
 80008d4:	481a      	ldr	r0, [pc, #104]	; (8000940 <mainApp+0x15c>)
 80008d6:	f002 f965 	bl	8002ba4 <siprintf>
					//printUSB(strBuf);
					RED_LED_H();
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <mainApp+0x144>)
 80008e2:	f000 ff1f 	bl	8001724 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 80008e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ea:	f000 fc31 	bl	8001150 <HAL_Delay>
//					sx1276_7_8_LoRaEntryTx();
//					sx1276_7_8_LoRaTxPacket();
					RED_LED_L();
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <mainApp+0x144>)
 80008f6:	f000 ff15 	bl	8001724 <HAL_GPIO_WritePin>
//					sx1276_7_8_LoRaEntryRx();

				}


			break;
 80008fa:	e001      	b.n	8000900 <mainApp+0x11c>


			break;
			default:

			break;
 80008fc:	bf00      	nop
 80008fe:	e7b2      	b.n	8000866 <mainApp+0x82>
			break;
 8000900:	bf00      	nop
		key1_count = 1;
 8000902:	e7b0      	b.n	8000866 <mainApp+0x82>
 8000904:	20000132 	.word	0x20000132
 8000908:	20000131 	.word	0x20000131
 800090c:	20000135 	.word	0x20000135
 8000910:	2000017e 	.word	0x2000017e
 8000914:	20000180 	.word	0x20000180
 8000918:	2000017f 	.word	0x2000017f
 800091c:	20000181 	.word	0x20000181
 8000920:	20000134 	.word	0x20000134
 8000924:	20000136 	.word	0x20000136
 8000928:	40021800 	.word	0x40021800
 800092c:	40020800 	.word	0x40020800
 8000930:	08003418 	.word	0x08003418
 8000934:	20000000 	.word	0x20000000
 8000938:	20000188 	.word	0x20000188
 800093c:	08003438 	.word	0x08003438
 8000940:	2000013c 	.word	0x2000013c

08000944 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(u8 WrPara)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
 // u8 bitcnt;
 // //nSEL_L();
	NSS_L();
 800094e:	2200      	movs	r2, #0
 8000950:	2110      	movs	r1, #16
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <SPICmd8bit+0x28>)
 8000954:	f000 fee6 	bl	8001724 <HAL_GPIO_WritePin>
 // SCK_L();
  
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 8000958:	1df9      	adds	r1, r7, #7
 800095a:	230a      	movs	r3, #10
 800095c:	2201      	movs	r2, #1
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <SPICmd8bit+0x2c>)
 8000960:	f001 fbcf 	bl	8002102 <HAL_SPI_Transmit>
//    SCK_H();
//    WrPara <<= 1;
//  }
//  SCK_L();
//  SDI_H();
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40020000 	.word	0x40020000
 8000970:	200000d8 	.word	0x200000d8

08000974 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
u8 SPIRead8bit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 u8 RdPara = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	71fb      	strb	r3, [r7, #7]
// u8 bitcnt;
 
//  //nSEL_L();
 NSS_L();
 800097e:	2200      	movs	r2, #0
 8000980:	2110      	movs	r1, #16
 8000982:	4807      	ldr	r0, [pc, #28]	; (80009a0 <SPIRead8bit+0x2c>)
 8000984:	f000 fece 	bl	8001724 <HAL_GPIO_WritePin>
//  SDI_H();                                                 //Read one byte data from FIFO, MOSI hold to High
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8000988:	1df9      	adds	r1, r7, #7
 800098a:	230a      	movs	r3, #10
 800098c:	2201      	movs	r2, #1
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <SPIRead8bit+0x30>)
 8000990:	f001 fcf3 	bl	800237a <HAL_SPI_Receive>
//      RdPara |= 0x01;
//    else
//      RdPara |= 0x00;
//  }
//  SCK_L();
  return(RdPara);
 8000994:	79fb      	ldrb	r3, [r7, #7]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40020000 	.word	0x40020000
 80009a4:	200000d8 	.word	0x200000d8

080009a8 <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
u8 SPIRead(u8 adr)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  u8 tmp; 
  SPICmd8bit(adr);                                         //Send address first
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ffc5 	bl	8000944 <SPICmd8bit>
  tmp = SPIRead8bit();  
 80009ba:	f7ff ffdb 	bl	8000974 <SPIRead8bit>
 80009be:	4603      	mov	r3, r0
 80009c0:	73fb      	strb	r3, [r7, #15]
  //nSEL_H();
  NSS_H();
 80009c2:	2201      	movs	r2, #1
 80009c4:	2110      	movs	r1, #16
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <SPIRead+0x30>)
 80009c8:	f000 feac 	bl	8001724 <HAL_GPIO_WritePin>
  return(tmp);
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40020000 	.word	0x40020000

080009dc <SPIWrite>:
**Function: SPI Write CMD
**Input:    u8 address & u8 data
**Output:   None
**********************************************************/
void SPIWrite(u8 adr, u8 WrPara)  
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	460a      	mov	r2, r1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	4613      	mov	r3, r2
 80009ea:	71bb      	strb	r3, [r7, #6]
	
	//nSEL_L();
	NSS_L();
 80009ec:	2200      	movs	r2, #0
 80009ee:	2110      	movs	r1, #16
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <SPIWrite+0x44>)
 80009f2:	f000 fe97 	bl	8001724 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ffa0 	bl	8000944 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ff9c 	bl	8000944 <SPICmd8bit>
	
  //SCK_L();
  //SDI_H();
  //nSEL_H();
	NSS_H();
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2110      	movs	r1, #16
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <SPIWrite+0x44>)
 8000a12:	f000 fe87 	bl	8001724 <HAL_GPIO_WritePin>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020000 	.word	0x40020000

08000a24 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(u8 adr, u8 *ptr, u8 length)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]
  u8 i;
  if(length<=1)                                            //length must more than one
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d91f      	bls.n	8000a7a <SPIBurstRead+0x56>
    return;
  else
  {
    //SCK_L();
    //nSEL_L();
	  NSS_L();
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <SPIBurstRead+0x60>)
 8000a40:	f000 fe70 	bl	8001724 <HAL_GPIO_WritePin>
    SPICmd8bit(adr); 
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff7c 	bl	8000944 <SPICmd8bit>
    for(i=0;i<length;i++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73fb      	strb	r3, [r7, #15]
 8000a50:	e009      	b.n	8000a66 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	18d4      	adds	r4, r2, r3
 8000a58:	f7ff ff8c 	bl	8000974 <SPIRead8bit>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	3301      	adds	r3, #1
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	7bfa      	ldrb	r2, [r7, #15]
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d3f1      	bcc.n	8000a52 <SPIBurstRead+0x2e>
    //nSEL_H();
    NSS_H();
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2110      	movs	r1, #16
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <SPIBurstRead+0x60>)
 8000a74:	f000 fe56 	bl	8001724 <HAL_GPIO_WritePin>
 8000a78:	e000      	b.n	8000a7c <SPIBurstRead+0x58>
    return;
 8000a7a:	bf00      	nop
  }
}
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd90      	pop	{r4, r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40020000 	.word	0x40020000

08000a88 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(u8 adr, const u8 *ptr, u8 length)
{ 
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71bb      	strb	r3, [r7, #6]
  u8 i;

  if(length<=1)                                            //length must more than one
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d922      	bls.n	8000ae4 <BurstWrite+0x5c>
    return;
  else  
  {   
   // SCK_L();
    //nSEL_L();
	  NSS_L();
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <BurstWrite+0x64>)
 8000aa4:	f000 fe3e 	bl	8001724 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff47 	bl	8000944 <SPICmd8bit>
    for(i=0;i<length;i++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e009      	b.n	8000ad0 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff3d 	bl	8000944 <SPICmd8bit>
    for(i=0;i<length;i++)
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	3301      	adds	r3, #1
 8000ace:	73fb      	strb	r3, [r7, #15]
 8000ad0:	7bfa      	ldrb	r2, [r7, #15]
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3f1      	bcc.n	8000abc <BurstWrite+0x34>
    //nSEL_H();
    NSS_H();
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2110      	movs	r1, #16
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <BurstWrite+0x64>)
 8000ade:	f000 fe21 	bl	8001724 <HAL_GPIO_WritePin>
 8000ae2:	e000      	b.n	8000ae6 <BurstWrite+0x5e>
    return;
 8000ae4:	bf00      	nop
  }
}
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40020000 	.word	0x40020000

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_SPI_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b9a:	23e0      	movs	r3, #224	; 0xe0
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000baa:	2305      	movs	r3, #5
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_SPI_MspInit+0x8c>)
 8000bb6:	f000 fbf1 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40013000 	.word	0x40013000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 fa78 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <sx1276_7_8_Standby>:
**Function: Entry standby mode
**Input:    None
**Output:   None
**********************************************************/
void sx1276_7_8_Standby(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
 8000c28:	2109      	movs	r1, #9
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f7ff fed6 	bl	80009dc <SPIWrite>
	//SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <sx1276_7_8_Sleep>:
**Function: Entry sleep mode
**Input:    None
**Output:   None
**********************************************************/
void sx1276_7_8_Sleep(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
 8000c38:	2108      	movs	r1, #8
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fece 	bl	80009dc <SPIWrite>
	//SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <sx1276_7_8_EntryLoRa>:
**Function: Set RFM69 entry LoRa(LongRange) mode
**Input:    None
**Output:   None
**********************************************************/
void sx1276_7_8_EntryLoRa(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
 8000c48:	2188      	movs	r1, #136	; 0x88
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fec6 	bl	80009dc <SPIWrite>
	//SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <sx1276_7_8_LoRaClearIrq>:
**Function: Clear all irq
**Input:    None
**Output:   None
**********************************************************/
void sx1276_7_8_LoRaClearIrq(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000c58:	21ff      	movs	r1, #255	; 0xff
 8000c5a:	2012      	movs	r0, #18
 8000c5c:	f7ff febe 	bl	80009dc <SPIWrite>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <sx1276_7_8_LoRaEntryRx>:
**Function: Entry Rx mode
**Input:    None
**Output:   None
**********************************************************/
u8 sx1276_7_8_LoRaEntryRx(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  u8 addr;

  sx1276_7_8_Config();                                         //setting base parameter
 8000c6a:	f000 f8ed 	bl	8000e48 <sx1276_7_8_Config>

  SPIWrite(REG_LR_PADAC,0x84);                              //Normal and Rx
 8000c6e:	2184      	movs	r1, #132	; 0x84
 8000c70:	204d      	movs	r0, #77	; 0x4d
 8000c72:	f7ff feb3 	bl	80009dc <SPIWrite>
  SPIWrite(LR_RegHopPeriod,0xFF);                          //RegHopPeriod NO FHSS
 8000c76:	21ff      	movs	r1, #255	; 0xff
 8000c78:	2024      	movs	r0, #36	; 0x24
 8000c7a:	f7ff feaf 	bl	80009dc <SPIWrite>
  SPIWrite(REG_LR_DIOMAPPING1,0x01);                       //DIO0=00, DIO1=00, DIO2=00, DIO3=01
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2040      	movs	r0, #64	; 0x40
 8000c82:	f7ff feab 	bl	80009dc <SPIWrite>

  SPIWrite(LR_RegIrqFlagsMask,0x3F);                       //Open RxDone interrupt & Timeout
 8000c86:	213f      	movs	r1, #63	; 0x3f
 8000c88:	2011      	movs	r0, #17
 8000c8a:	f7ff fea7 	bl	80009dc <SPIWrite>
  sx1276_7_8_LoRaClearIrq();
 8000c8e:	f7ff ffe1 	bl	8000c54 <sx1276_7_8_LoRaClearIrq>
  SPIWrite(0x30,1<<7);
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	2030      	movs	r0, #48	; 0x30
 8000c96:	f7ff fea1 	bl	80009dc <SPIWrite>
  SPIWrite(LR_RegPayloadLength,21);                       //RegPayloadLength  21byte(this register must difine when the data long of one byte in SF is 6)
 8000c9a:	2115      	movs	r1, #21
 8000c9c:	2022      	movs	r0, #34	; 0x22
 8000c9e:	f7ff fe9d 	bl	80009dc <SPIWrite>

  addr = SPIRead(LR_RegFifoRxBaseAddr);           				//Read RxBaseAddr
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f7ff fe80 	bl	80009a8 <SPIRead>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
  SPIWrite(LR_RegFifoAddrPtr,addr);                        //RxBaseAddr -> FiFoAddrPtr��
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	200d      	movs	r0, #13
 8000cb2:	f7ff fe93 	bl	80009dc <SPIWrite>
  SPIWrite(LR_RegOpMode,0x8d);                        		//Continuous Rx Mode//Low Frequency Mode
 8000cb6:	218d      	movs	r1, #141	; 0x8d
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff fe8f 	bl	80009dc <SPIWrite>
	//SPIWrite(LR_RegOpMode,0x05);                        		//Continuous Rx Mode//High Frequency Mode
	SysTime = 0;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <sx1276_7_8_LoRaEntryRx+0x88>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		if((SPIRead(LR_RegModemStat)&0x04)==0x04)   //Rx-on going RegModemStat
 8000cc4:	2018      	movs	r0, #24
 8000cc6:	f7ff fe6f 	bl	80009a8 <SPIRead>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d005      	beq.n	8000ce0 <sx1276_7_8_LoRaEntryRx+0x7c>
			break;
		if(SysTime>=3)
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <sx1276_7_8_LoRaEntryRx+0x88>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d9f3      	bls.n	8000cc4 <sx1276_7_8_LoRaEntryRx+0x60>
			return 0;                                              //over time for error
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e001      	b.n	8000ce4 <sx1276_7_8_LoRaEntryRx+0x80>
			break;
 8000ce0:	bf00      	nop
	}
	return 0;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000132 	.word	0x20000132

08000cf0 <sx1276_7_8_LoRaRxPacket>:
**Input:    None
**Output:   1- Success
            0- Fail
**********************************************************/
u8 sx1276_7_8_LoRaRxPacket(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  u8 i;
  u8 addr;
  u8 packet_size;

  if(Get_NIRQ())
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	481d      	ldr	r0, [pc, #116]	; (8000d70 <sx1276_7_8_LoRaRxPacket+0x80>)
 8000cfa:	f000 fcfb 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d02f      	beq.n	8000d64 <sx1276_7_8_LoRaRxPacket+0x74>
  {
    for(i=0;i<32;i++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	e006      	b.n	8000d18 <sx1276_7_8_LoRaRxPacket+0x28>
      RxData[i] = 0x00;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <sx1276_7_8_LoRaRxPacket+0x84>)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	54d1      	strb	r1, [r2, r3]
    for(i=0;i<32;i++)
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	3301      	adds	r3, #1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b1f      	cmp	r3, #31
 8000d1c:	d9f5      	bls.n	8000d0a <sx1276_7_8_LoRaRxPacket+0x1a>

    addr = SPIRead(LR_RegFifoRxCurrentaddr);      //last packet addr
 8000d1e:	2010      	movs	r0, #16
 8000d20:	f7ff fe42 	bl	80009a8 <SPIRead>
 8000d24:	4603      	mov	r3, r0
 8000d26:	717b      	strb	r3, [r7, #5]
    SPIWrite(LR_RegFifoAddrPtr,addr);                      //RxBaseAddr -> FiFoAddrPtr
 8000d28:	797b      	ldrb	r3, [r7, #5]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	200d      	movs	r0, #13
 8000d2e:	f7ff fe55 	bl	80009dc <SPIWrite>
    if(sx1276_7_8SpreadFactorTbl[Lora_Rate_Sel]==6)           //When SpreadFactor is six��will used Implicit Header mode(Excluding internal packet length)
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <sx1276_7_8_LoRaRxPacket+0x88>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <sx1276_7_8_LoRaRxPacket+0x8c>)
 8000d3a:	5c9b      	ldrb	r3, [r3, r2]
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	d102      	bne.n	8000d46 <sx1276_7_8_LoRaRxPacket+0x56>
      packet_size=21;
 8000d40:	2315      	movs	r3, #21
 8000d42:	71bb      	strb	r3, [r7, #6]
 8000d44:	e004      	b.n	8000d50 <sx1276_7_8_LoRaRxPacket+0x60>
    else
      packet_size = SPIRead(LR_RegRxNbBytes);     //Number for received bytes
 8000d46:	2013      	movs	r0, #19
 8000d48:	f7ff fe2e 	bl	80009a8 <SPIRead>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71bb      	strb	r3, [r7, #6]
    SPIBurstRead(0x00, RxData, packet_size);
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	461a      	mov	r2, r3
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <sx1276_7_8_LoRaRxPacket+0x84>)
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fe64 	bl	8000a24 <SPIBurstRead>

    sx1276_7_8_LoRaClearIrq();
 8000d5c:	f7ff ff7a 	bl	8000c54 <sx1276_7_8_LoRaClearIrq>
//    else
//      return(0);
  }
  else
    return(0);
  return(1);
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <sx1276_7_8_LoRaRxPacket+0x76>
    return(0);
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020800 	.word	0x40020800
 8000d74:	20000188 	.word	0x20000188
 8000d78:	20000181 	.word	0x20000181
 8000d7c:	08003454 	.word	0x08003454

08000d80 <sx1276_7_8_LoRaEntryTx>:
**Function: Entry Tx mode
**Input:    None
**Output:   None
**********************************************************/
u8 sx1276_7_8_LoRaEntryTx(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  u8 addr,temp;

  sx1276_7_8_Config();                                         //setting base parameter
 8000d86:	f000 f85f 	bl	8000e48 <sx1276_7_8_Config>

  SPIWrite(REG_LR_PADAC,0x87);                                   //Tx for 20dBm
 8000d8a:	2187      	movs	r1, #135	; 0x87
 8000d8c:	204d      	movs	r0, #77	; 0x4d
 8000d8e:	f7ff fe25 	bl	80009dc <SPIWrite>
  SPIWrite(LR_RegHopPeriod,0x00);                               //RegHopPeriod NO FHSS
 8000d92:	2100      	movs	r1, #0
 8000d94:	2024      	movs	r0, #36	; 0x24
 8000d96:	f7ff fe21 	bl	80009dc <SPIWrite>
  SPIWrite(REG_LR_DIOMAPPING1,0x41);                       //DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8000d9a:	2141      	movs	r1, #65	; 0x41
 8000d9c:	2040      	movs	r0, #64	; 0x40
 8000d9e:	f7ff fe1d 	bl	80009dc <SPIWrite>

  sx1276_7_8_LoRaClearIrq();
 8000da2:	f7ff ff57 	bl	8000c54 <sx1276_7_8_LoRaClearIrq>
  SPIWrite(LR_RegIrqFlagsMask,0xF7);                       //Open TxDone interrupt
 8000da6:	21f7      	movs	r1, #247	; 0xf7
 8000da8:	2011      	movs	r0, #17
 8000daa:	f7ff fe17 	bl	80009dc <SPIWrite>
  SPIWrite(LR_RegPayloadLength,21);                       //RegPayloadLength  21byte
 8000dae:	2115      	movs	r1, #21
 8000db0:	2022      	movs	r0, #34	; 0x22
 8000db2:	f7ff fe13 	bl	80009dc <SPIWrite>

  addr = SPIRead(LR_RegFifoTxBaseAddr);           //RegFiFoTxBaseAddr
 8000db6:	200e      	movs	r0, #14
 8000db8:	f7ff fdf6 	bl	80009a8 <SPIRead>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  SPIWrite(LR_RegFifoAddrPtr,addr);                        //RegFifoAddrPtr
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	200d      	movs	r0, #13
 8000dc6:	f7ff fe09 	bl	80009dc <SPIWrite>
	SysTime = 0;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <sx1276_7_8_LoRaEntryTx+0x78>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		temp=SPIRead(LR_RegPayloadLength);
 8000dd0:	2022      	movs	r0, #34	; 0x22
 8000dd2:	f7ff fde9 	bl	80009a8 <SPIRead>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71bb      	strb	r3, [r7, #6]
		if(temp==21)
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	2b15      	cmp	r3, #21
 8000dde:	d005      	beq.n	8000dec <sx1276_7_8_LoRaEntryTx+0x6c>
		{
			break;
		}
		if(SysTime>=3)
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <sx1276_7_8_LoRaEntryTx+0x78>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d9f3      	bls.n	8000dd0 <sx1276_7_8_LoRaEntryTx+0x50>
			return 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e001      	b.n	8000df0 <sx1276_7_8_LoRaEntryTx+0x70>
			break;
 8000dec:	bf00      	nop
	}
	return 0;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000132 	.word	0x20000132

08000dfc <sx1276_7_8_LoRaTxPacket>:
**Function: Send data in LoRa mode
**Input:    None
**Output:   1- Send over
**********************************************************/
u8 sx1276_7_8_LoRaTxPacket(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
 // u8 TxFlag=0;
 // u8 addr;

	BurstWrite(0x00, (u8 *)sx1276_7_8Data, strlen((char*)sx1276_7_8Data));
 8000e00:	480f      	ldr	r0, [pc, #60]	; (8000e40 <sx1276_7_8_LoRaTxPacket+0x44>)
 8000e02:	f7ff f9f5 	bl	80001f0 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <sx1276_7_8_LoRaTxPacket+0x44>)
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fe3a 	bl	8000a88 <BurstWrite>
	SPIWrite(LR_RegOpMode,0x8b);                    //Tx Mode
 8000e14:	218b      	movs	r1, #139	; 0x8b
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fde0 	bl	80009dc <SPIWrite>
	while(1)
	{
		if(Get_NIRQ())                      //Packet send over
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4809      	ldr	r0, [pc, #36]	; (8000e44 <sx1276_7_8_LoRaTxPacket+0x48>)
 8000e20:	f000 fc68 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f8      	beq.n	8000e1c <sx1276_7_8_LoRaTxPacket+0x20>
		{
			SPIRead(LR_RegIrqFlags);
 8000e2a:	2012      	movs	r0, #18
 8000e2c:	f7ff fdbc 	bl	80009a8 <SPIRead>
			sx1276_7_8_LoRaClearIrq();                                //Clear irq
 8000e30:	f7ff ff10 	bl	8000c54 <sx1276_7_8_LoRaClearIrq>

			sx1276_7_8_Standby();                                     //Entry Standby mode
 8000e34:	f7ff fef6 	bl	8000c24 <sx1276_7_8_Standby>

			break;
 8000e38:	bf00      	nop
		}
	}
	return 0;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	40020800 	.word	0x40020800

08000e48 <sx1276_7_8_Config>:
**Function: sx1276_7_8 base config
**Input:    mode
**Output:   None
**********************************************************/
void sx1276_7_8_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  //u8 i;

  sx1276_7_8_Sleep();                                      //Change modem mode Must in Sleep mode
 8000e4e:	f7ff fef1 	bl	8000c34 <sx1276_7_8_Sleep>
    //NOP();
	HAL_Delay(10);
 8000e52:	200a      	movs	r0, #10
 8000e54:	f000 f97c 	bl	8001150 <HAL_Delay>

  //lora mode
	sx1276_7_8_EntryLoRa();
 8000e58:	f7ff fef4 	bl	8000c44 <sx1276_7_8_EntryLoRa>
	//SPIWrite(0x5904);   //?? Change digital regulator form 1.6V to 1.47V: see errata note

	BurstWrite(LR_RegFrMsb,sx1276_7_8FreqTbl[Freq_Sel],3);  //setting frequency parameter
 8000e5c:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <sx1276_7_8_Config+0x120>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	4a40      	ldr	r2, [pc, #256]	; (8000f6c <sx1276_7_8_Config+0x124>)
 8000e6a:	4413      	add	r3, r2
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2006      	movs	r0, #6
 8000e72:	f7ff fe09 	bl	8000a88 <BurstWrite>

	//setting base parameter
	SPIWrite(LR_RegPaConfig,sx1276_7_8PowerTbl[Power_Sel]);             //Setting output power parameter
 8000e76:	4b3e      	ldr	r3, [pc, #248]	; (8000f70 <sx1276_7_8_Config+0x128>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <sx1276_7_8_Config+0x12c>)
 8000e7e:	5c9b      	ldrb	r3, [r3, r2]
 8000e80:	4619      	mov	r1, r3
 8000e82:	2009      	movs	r0, #9
 8000e84:	f7ff fdaa 	bl	80009dc <SPIWrite>

	SPIWrite(LR_RegOcp,0x0B);                              //RegOcp,Close Ocp
 8000e88:	210b      	movs	r1, #11
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	f7ff fda6 	bl	80009dc <SPIWrite>
	SPIWrite(LR_RegLna,0x23);                              //RegLNA,High & LNA Enable
 8000e90:	2123      	movs	r1, #35	; 0x23
 8000e92:	200c      	movs	r0, #12
 8000e94:	f7ff fda2 	bl	80009dc <SPIWrite>

	if(sx1276_7_8SpreadFactorTbl[Lora_Rate_Sel]==6)           //SFactor=6
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <sx1276_7_8_Config+0x130>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <sx1276_7_8_Config+0x134>)
 8000ea0:	5c9b      	ldrb	r3, [r3, r2]
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d130      	bne.n	8000f08 <sx1276_7_8_Config+0xc0>
	{
		u8 tmp;
		SPIWrite(LR_RegModemConfig1,((sx1276_7_8LoRaBwTbl[BandWide_Sel]<<4)+(CR<<1)+0x01));//Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000ea6:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <sx1276_7_8_Config+0x138>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b35      	ldr	r3, [pc, #212]	; (8000f84 <sx1276_7_8_Config+0x13c>)
 8000eae:	5c9b      	ldrb	r3, [r3, r2]
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	3303      	adds	r3, #3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4619      	mov	r1, r3
 8000eba:	201d      	movs	r0, #29
 8000ebc:	f7ff fd8e 	bl	80009dc <SPIWrite>
		SPIWrite(LR_RegModemConfig2,((sx1276_7_8SpreadFactorTbl[Lora_Rate_Sel]<<4)+(SPI_CRC<<2)+0x03));
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <sx1276_7_8_Config+0x130>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <sx1276_7_8_Config+0x134>)
 8000ec8:	5c9b      	ldrb	r3, [r3, r2]
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	3307      	adds	r3, #7
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	201e      	movs	r0, #30
 8000ed6:	f7ff fd81 	bl	80009dc <SPIWrite>

		tmp = SPIRead(0x31);
 8000eda:	2031      	movs	r0, #49	; 0x31
 8000edc:	f7ff fd64 	bl	80009a8 <SPIRead>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
		tmp &= 0xF8;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f023 0307 	bic.w	r3, r3, #7
 8000eea:	71fb      	strb	r3, [r7, #7]
		tmp |= 0x05;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f043 0305 	orr.w	r3, r3, #5
 8000ef2:	71fb      	strb	r3, [r7, #7]
		SPIWrite(0x31,tmp);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2031      	movs	r0, #49	; 0x31
 8000efa:	f7ff fd6f 	bl	80009dc <SPIWrite>
		SPIWrite(0x37,0x0C);
 8000efe:	210c      	movs	r1, #12
 8000f00:	2037      	movs	r0, #55	; 0x37
 8000f02:	f7ff fd6b 	bl	80009dc <SPIWrite>
 8000f06:	e019      	b.n	8000f3c <sx1276_7_8_Config+0xf4>
	}
	else
	{
		SPIWrite(LR_RegModemConfig1,((sx1276_7_8LoRaBwTbl[BandWide_Sel]<<4)+(CR<<1)+0x00));//Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <sx1276_7_8_Config+0x138>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <sx1276_7_8_Config+0x13c>)
 8000f10:	5c9b      	ldrb	r3, [r3, r2]
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	3302      	adds	r3, #2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f7ff fd5d 	bl	80009dc <SPIWrite>
		SPIWrite(LR_RegModemConfig2,((sx1276_7_8SpreadFactorTbl[Lora_Rate_Sel]<<4)+(SPI_CRC<<2)+0x03));  //SFactor &  LNA gain set by the internal AGC loop
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <sx1276_7_8_Config+0x130>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <sx1276_7_8_Config+0x134>)
 8000f2a:	5c9b      	ldrb	r3, [r3, r2]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3307      	adds	r3, #7
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4619      	mov	r1, r3
 8000f36:	201e      	movs	r0, #30
 8000f38:	f7ff fd50 	bl	80009dc <SPIWrite>
	}
	SPIWrite(LR_RegSymbTimeoutLsb,0xFF);                   //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000f3c:	21ff      	movs	r1, #255	; 0xff
 8000f3e:	201f      	movs	r0, #31
 8000f40:	f7ff fd4c 	bl	80009dc <SPIWrite>

	SPIWrite(LR_RegPreambleMsb,0x00);                       //RegPreambleMsb
 8000f44:	2100      	movs	r1, #0
 8000f46:	2020      	movs	r0, #32
 8000f48:	f7ff fd48 	bl	80009dc <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,12);                      //RegPreambleLsb 8+4=12byte Preamble
 8000f4c:	210c      	movs	r1, #12
 8000f4e:	2021      	movs	r0, #33	; 0x21
 8000f50:	f7ff fd44 	bl	80009dc <SPIWrite>

	SPIWrite(REG_LR_DIOMAPPING2,0x01);                     //RegDioMapping2 DIO5=00, DIO4=01
 8000f54:	2101      	movs	r1, #1
 8000f56:	2041      	movs	r0, #65	; 0x41
 8000f58:	f7ff fd40 	bl	80009dc <SPIWrite>

  sx1276_7_8_Standby();                                         //Entry standby mode
 8000f5c:	f7ff fe62 	bl	8000c24 <sx1276_7_8_Standby>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000180 	.word	0x20000180
 8000f6c:	0800344c 	.word	0x0800344c
 8000f70:	2000017f 	.word	0x2000017f
 8000f74:	08003450 	.word	0x08003450
 8000f78:	20000181 	.word	0x20000181
 8000f7c:	08003454 	.word	0x08003454
 8000f80:	20000134 	.word	0x20000134
 8000f84:	0800345c 	.word	0x0800345c

08000f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f90:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <_sbrk+0x5c>)
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <_sbrk+0x60>)
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_sbrk+0x64>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <_sbrk+0x68>)
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d207      	bcs.n	8000fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb8:	f001 fdc2 	bl	8002b40 <__errno>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <_sbrk+0x64>)
 8000fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20030000 	.word	0x20030000
 8000fe8:	00000400 	.word	0x00000400
 8000fec:	200000cc 	.word	0x200000cc
 8000ff0:	200001e0 	.word	0x200001e0

08000ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101e:	490e      	ldr	r1, [pc, #56]	; (8001058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001034:	4c0b      	ldr	r4, [pc, #44]	; (8001064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001042:	f7ff ffd7 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001046:	f001 fd81 	bl	8002b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff faa5 	bl	8000598 <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001050:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800105c:	080034bc 	.word	0x080034bc
  ldr r2, =_sbss
 8001060:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001064:	200001dc 	.word	0x200001dc

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <HAL_Init+0x40>)
 8001076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_Init+0x40>)
 8001082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_Init+0x40>)
 800108e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f931 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fd26 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023c00 	.word	0x40023c00

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f93b 	bl	800134a <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f911 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000040 	.word	0x20000040
 8001108:	20000048 	.word	0x20000048
 800110c:	20000044 	.word	0x20000044

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000048 	.word	0x20000048
 8001134:	200001c8 	.word	0x200001c8

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200001c8 	.word	0x200001c8

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000048 	.word	0x20000048

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff47 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff5c 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffb0 	bl	80012b8 <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b04      	cmp	r3, #4
 8001370:	d106      	bne.n	8001380 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800137e:	e005      	b.n	800138c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001386:	f023 0304 	bic.w	r3, r3, #4
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	e177      	b.n	80016a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f040 8166 	bne.w	80016a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d005      	beq.n	80013ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d130      	bne.n	8001450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f003 0201 	and.w	r2, r3, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b03      	cmp	r3, #3
 800145a:	d017      	beq.n	800148c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d123      	bne.n	80014e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	69b9      	ldr	r1, [r7, #24]
 80014dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0203 	and.w	r2, r3, #3
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80c0 	beq.w	80016a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <HAL_GPIO_Init+0x324>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a65      	ldr	r2, [pc, #404]	; (80016c0 <HAL_GPIO_Init+0x324>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b63      	ldr	r3, [pc, #396]	; (80016c0 <HAL_GPIO_Init+0x324>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153e:	4a61      	ldr	r2, [pc, #388]	; (80016c4 <HAL_GPIO_Init+0x328>)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a58      	ldr	r2, [pc, #352]	; (80016c8 <HAL_GPIO_Init+0x32c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d037      	beq.n	80015da <HAL_GPIO_Init+0x23e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a57      	ldr	r2, [pc, #348]	; (80016cc <HAL_GPIO_Init+0x330>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d031      	beq.n	80015d6 <HAL_GPIO_Init+0x23a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a56      	ldr	r2, [pc, #344]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d02b      	beq.n	80015d2 <HAL_GPIO_Init+0x236>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a55      	ldr	r2, [pc, #340]	; (80016d4 <HAL_GPIO_Init+0x338>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d025      	beq.n	80015ce <HAL_GPIO_Init+0x232>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a54      	ldr	r2, [pc, #336]	; (80016d8 <HAL_GPIO_Init+0x33c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d01f      	beq.n	80015ca <HAL_GPIO_Init+0x22e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a53      	ldr	r2, [pc, #332]	; (80016dc <HAL_GPIO_Init+0x340>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d019      	beq.n	80015c6 <HAL_GPIO_Init+0x22a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <HAL_GPIO_Init+0x344>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d013      	beq.n	80015c2 <HAL_GPIO_Init+0x226>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a51      	ldr	r2, [pc, #324]	; (80016e4 <HAL_GPIO_Init+0x348>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d00d      	beq.n	80015be <HAL_GPIO_Init+0x222>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a50      	ldr	r2, [pc, #320]	; (80016e8 <HAL_GPIO_Init+0x34c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d007      	beq.n	80015ba <HAL_GPIO_Init+0x21e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <HAL_GPIO_Init+0x350>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d101      	bne.n	80015b6 <HAL_GPIO_Init+0x21a>
 80015b2:	2309      	movs	r3, #9
 80015b4:	e012      	b.n	80015dc <HAL_GPIO_Init+0x240>
 80015b6:	230a      	movs	r3, #10
 80015b8:	e010      	b.n	80015dc <HAL_GPIO_Init+0x240>
 80015ba:	2308      	movs	r3, #8
 80015bc:	e00e      	b.n	80015dc <HAL_GPIO_Init+0x240>
 80015be:	2307      	movs	r3, #7
 80015c0:	e00c      	b.n	80015dc <HAL_GPIO_Init+0x240>
 80015c2:	2306      	movs	r3, #6
 80015c4:	e00a      	b.n	80015dc <HAL_GPIO_Init+0x240>
 80015c6:	2305      	movs	r3, #5
 80015c8:	e008      	b.n	80015dc <HAL_GPIO_Init+0x240>
 80015ca:	2304      	movs	r3, #4
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x240>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e004      	b.n	80015dc <HAL_GPIO_Init+0x240>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_Init+0x240>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x240>
 80015da:	2300      	movs	r3, #0
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	f002 0203 	and.w	r2, r2, #3
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	4093      	lsls	r3, r2
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ec:	4935      	ldr	r1, [pc, #212]	; (80016c4 <HAL_GPIO_Init+0x328>)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <HAL_GPIO_Init+0x354>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800161e:	4a34      	ldr	r2, [pc, #208]	; (80016f0 <HAL_GPIO_Init+0x354>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001624:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <HAL_GPIO_Init+0x354>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001648:	4a29      	ldr	r2, [pc, #164]	; (80016f0 <HAL_GPIO_Init+0x354>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_GPIO_Init+0x354>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001672:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <HAL_GPIO_Init+0x354>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <HAL_GPIO_Init+0x354>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <HAL_GPIO_Init+0x354>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	f67f ae84 	bls.w	80013b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	40020400 	.word	0x40020400
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40020c00 	.word	0x40020c00
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40021400 	.word	0x40021400
 80016e0:	40021800 	.word	0x40021800
 80016e4:	40021c00 	.word	0x40021c00
 80016e8:	40022000 	.word	0x40022000
 80016ec:	40022400 	.word	0x40022400
 80016f0:	40013c00 	.word	0x40013c00

080016f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e001      	b.n	8001716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001740:	e003      	b.n	800174a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	041a      	lsls	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e264      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d075      	beq.n	8001862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001776:	4ba3      	ldr	r3, [pc, #652]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b04      	cmp	r3, #4
 8001780:	d00c      	beq.n	800179c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4ba0      	ldr	r3, [pc, #640]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800178a:	2b08      	cmp	r3, #8
 800178c:	d112      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178e:	4b9d      	ldr	r3, [pc, #628]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800179a:	d10b      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	4b99      	ldr	r3, [pc, #612]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d05b      	beq.n	8001860 <HAL_RCC_OscConfig+0x108>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d157      	bne.n	8001860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e23f      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017bc:	d106      	bne.n	80017cc <HAL_RCC_OscConfig+0x74>
 80017be:	4b91      	ldr	r3, [pc, #580]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a90      	ldr	r2, [pc, #576]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e01d      	b.n	8001808 <HAL_RCC_OscConfig+0xb0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x98>
 80017d6:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a8a      	ldr	r2, [pc, #552]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a87      	ldr	r2, [pc, #540]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xb0>
 80017f0:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a83      	ldr	r2, [pc, #524]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a80      	ldr	r2, [pc, #512]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fc92 	bl	8001138 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fc8e 	bl	8001138 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e204      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0xc0>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fc7e 	bl	8001138 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fc7a 	bl	8001138 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1f0      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0xe8>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d063      	beq.n	8001936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001882:	2b08      	cmp	r3, #8
 8001884:	d11c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x152>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1c4      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4952      	ldr	r1, [pc, #328]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	e03a      	b.n	8001936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <HAL_RCC_OscConfig+0x2b0>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff fc33 	bl	8001138 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fc2f 	bl	8001138 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1a5      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4940      	ldr	r1, [pc, #256]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_OscConfig+0x2b0>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fc12 	bl	8001138 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff fc0e 	bl	8001138 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e184      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d030      	beq.n	80019a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d016      	beq.n	8001978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_RCC_OscConfig+0x2b4>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff fbf2 	bl	8001138 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fbee 	bl	8001138 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e164      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x200>
 8001976:	e015      	b.n	80019a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_OscConfig+0x2b4>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff fbdb 	bl	8001138 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fbd7 	bl	8001138 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e14d      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a0 	beq.w	8001af2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_RCC_OscConfig+0x2b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d121      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_RCC_OscConfig+0x2b8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_RCC_OscConfig+0x2b8>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fb9d 	bl	8001138 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e011      	b.n	8001a26 <HAL_RCC_OscConfig+0x2ce>
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	42470000 	.word	0x42470000
 8001a0c:	42470e80 	.word	0x42470e80
 8001a10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a14:	f7ff fb90 	bl	8001138 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e106      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b85      	ldr	r3, [pc, #532]	; (8001c3c <HAL_RCC_OscConfig+0x4e4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d106      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2f0>
 8001a3a:	4b81      	ldr	r3, [pc, #516]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a80      	ldr	r2, [pc, #512]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	e01c      	b.n	8001a82 <HAL_RCC_OscConfig+0x32a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d10c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x312>
 8001a50:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a7a      	ldr	r2, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a77      	ldr	r2, [pc, #476]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0x32a>
 8001a6a:	4b75      	ldr	r3, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	4a74      	ldr	r2, [pc, #464]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70
 8001a76:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7a:	4a71      	ldr	r2, [pc, #452]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d015      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fb55 	bl	8001138 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff fb51 	bl	8001138 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0c5      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa8:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ee      	beq.n	8001a92 <HAL_RCC_OscConfig+0x33a>
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fb3f 	bl	8001138 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff fb3b 	bl	8001138 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0af      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad4:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ee      	bne.n	8001abe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae6:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a55      	ldr	r2, [pc, #340]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 809b 	beq.w	8001c32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d05c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d141      	bne.n	8001b94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <HAL_RCC_OscConfig+0x4ec>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fb0f 	bl	8001138 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff fb0b 	bl	8001138 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e081      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b30:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	019b      	lsls	r3, r3, #6
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	3b01      	subs	r3, #1
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	061b      	lsls	r3, r3, #24
 8001b60:	4937      	ldr	r1, [pc, #220]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_RCC_OscConfig+0x4ec>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fae4 	bl	8001138 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff fae0 	bl	8001138 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e056      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x41c>
 8001b92:	e04e      	b.n	8001c32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_OscConfig+0x4ec>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff facd 	bl	8001138 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff fac9 	bl	8001138 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e03f      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x44a>
 8001bc0:	e037      	b.n	8001c32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e032      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_RCC_OscConfig+0x4e8>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d028      	beq.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d121      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d11a      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bfe:	4013      	ands	r3, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d111      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	3b01      	subs	r3, #1
 8001c18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	40023800 	.word	0x40023800
 8001c44:	42470060 	.word	0x42470060

08001c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0cc      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d90c      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d044      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d119      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e067      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4934      	ldr	r1, [pc, #208]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f9fe 	bl	8001138 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f9fa 	bl	8001138 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e04f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d20c      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f821 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490a      	ldr	r1, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f95e 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00
 8001e04:	40023800 	.word	0x40023800
 8001e08:	08003468 	.word	0x08003468
 8001e0c:	20000040 	.word	0x20000040
 8001e10:	20000044 	.word	0x20000044

08001e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	2300      	movs	r3, #0
 8001e26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e2c:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d00d      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x40>
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	f200 80bd 	bhi.w	8001fb8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x34>
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e46:	e0b7      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b61      	ldr	r3, [pc, #388]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e4a:	60bb      	str	r3, [r7, #8]
       break;
 8001e4c:	e0b7      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4e:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001e50:	60bb      	str	r3, [r7, #8]
      break;
 8001e52:	e0b4      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e54:	4b5d      	ldr	r3, [pc, #372]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04d      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6a:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	461a      	mov	r2, r3
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	ea02 0800 	and.w	r8, r2, r0
 8001e82:	ea03 0901 	and.w	r9, r3, r1
 8001e86:	4640      	mov	r0, r8
 8001e88:	4649      	mov	r1, r9
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	014b      	lsls	r3, r1, #5
 8001e94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e98:	0142      	lsls	r2, r0, #5
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	ebb0 0008 	subs.w	r0, r0, r8
 8001ea2:	eb61 0109 	sbc.w	r1, r1, r9
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	018b      	lsls	r3, r1, #6
 8001eb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eb4:	0182      	lsls	r2, r0, #6
 8001eb6:	1a12      	subs	r2, r2, r0
 8001eb8:	eb63 0301 	sbc.w	r3, r3, r1
 8001ebc:	f04f 0000 	mov.w	r0, #0
 8001ec0:	f04f 0100 	mov.w	r1, #0
 8001ec4:	00d9      	lsls	r1, r3, #3
 8001ec6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eca:	00d0      	lsls	r0, r2, #3
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	eb12 0208 	adds.w	r2, r2, r8
 8001ed4:	eb43 0309 	adc.w	r3, r3, r9
 8001ed8:	f04f 0000 	mov.w	r0, #0
 8001edc:	f04f 0100 	mov.w	r1, #0
 8001ee0:	0259      	lsls	r1, r3, #9
 8001ee2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ee6:	0250      	lsls	r0, r2, #9
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f7fe f9d2 	bl	80002a0 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4613      	mov	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e04a      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	099b      	lsrs	r3, r3, #6
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	ea02 0400 	and.w	r4, r2, r0
 8001f1e:	ea03 0501 	and.w	r5, r3, r1
 8001f22:	4620      	mov	r0, r4
 8001f24:	4629      	mov	r1, r5
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	014b      	lsls	r3, r1, #5
 8001f30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f34:	0142      	lsls	r2, r0, #5
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	1b00      	subs	r0, r0, r4
 8001f3c:	eb61 0105 	sbc.w	r1, r1, r5
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	018b      	lsls	r3, r1, #6
 8001f4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f4e:	0182      	lsls	r2, r0, #6
 8001f50:	1a12      	subs	r2, r2, r0
 8001f52:	eb63 0301 	sbc.w	r3, r3, r1
 8001f56:	f04f 0000 	mov.w	r0, #0
 8001f5a:	f04f 0100 	mov.w	r1, #0
 8001f5e:	00d9      	lsls	r1, r3, #3
 8001f60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f64:	00d0      	lsls	r0, r2, #3
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	1912      	adds	r2, r2, r4
 8001f6c:	eb45 0303 	adc.w	r3, r5, r3
 8001f70:	f04f 0000 	mov.w	r0, #0
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	0299      	lsls	r1, r3, #10
 8001f7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f7e:	0290      	lsls	r0, r2, #10
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	f7fe f986 	bl	80002a0 <__aeabi_uldivmod>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4613      	mov	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	60bb      	str	r3, [r7, #8]
      break;
 8001fb6:	e002      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001fba:	60bb      	str	r3, [r7, #8]
      break;
 8001fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	00f42400 	.word	0x00f42400
 8001fd4:	007a1200 	.word	0x007a1200

08001fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_RCC_GetHCLKFreq+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000040 	.word	0x20000040

08001ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e07b      	b.n	80020fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	d108      	bne.n	800201c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002012:	d009      	beq.n	8002028 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
 800201a:	e005      	b.n	8002028 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fd7c 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800205e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ac:	ea42 0103 	orr.w	r1, r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	f003 0104 	and.w	r1, r3, #4
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	f003 0210 	and.w	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b088      	sub	sp, #32
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_SPI_Transmit+0x22>
 8002120:	2302      	movs	r3, #2
 8002122:	e126      	b.n	8002372 <HAL_SPI_Transmit+0x270>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800212c:	f7ff f804 	bl	8001138 <HAL_GetTick>
 8002130:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d002      	beq.n	8002148 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002142:	2302      	movs	r3, #2
 8002144:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002146:	e10b      	b.n	8002360 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_SPI_Transmit+0x52>
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002158:	e102      	b.n	8002360 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2203      	movs	r2, #3
 800215e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	88fa      	ldrh	r2, [r7, #6]
 8002172:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a0:	d10f      	bne.n	80021c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d007      	beq.n	80021e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021e8:	d14b      	bne.n	8002282 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_SPI_Transmit+0xf6>
 80021f2:	8afb      	ldrh	r3, [r7, #22]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d13e      	bne.n	8002276 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	881a      	ldrh	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	1c9a      	adds	r2, r3, #2
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800221c:	e02b      	b.n	8002276 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b02      	cmp	r3, #2
 800222a:	d112      	bne.n	8002252 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	881a      	ldrh	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	1c9a      	adds	r2, r3, #2
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002250:	e011      	b.n	8002276 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002252:	f7fe ff71 	bl	8001138 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d803      	bhi.n	800226a <HAL_SPI_Transmit+0x168>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d102      	bne.n	8002270 <HAL_SPI_Transmit+0x16e>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002274:	e074      	b.n	8002360 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ce      	bne.n	800221e <HAL_SPI_Transmit+0x11c>
 8002280:	e04c      	b.n	800231c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_SPI_Transmit+0x18e>
 800228a:	8afb      	ldrh	r3, [r7, #22]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d140      	bne.n	8002312 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	7812      	ldrb	r2, [r2, #0]
 800229c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022b6:	e02c      	b.n	8002312 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d113      	bne.n	80022ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	330c      	adds	r3, #12
 80022d0:	7812      	ldrb	r2, [r2, #0]
 80022d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80022ec:	e011      	b.n	8002312 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ee:	f7fe ff23 	bl	8001138 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d803      	bhi.n	8002306 <HAL_SPI_Transmit+0x204>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d102      	bne.n	800230c <HAL_SPI_Transmit+0x20a>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002310:	e026      	b.n	8002360 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1cd      	bne.n	80022b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	6839      	ldr	r1, [r7, #0]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fbcb 	bl	8002abc <SPI_EndRxTxTransaction>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	77fb      	strb	r3, [r7, #31]
 800235c:	e000      	b.n	8002360 <HAL_SPI_Transmit+0x25e>
  }

error:
 800235e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002370:	7ffb      	ldrb	r3, [r7, #31]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b088      	sub	sp, #32
 800237e:	af02      	add	r7, sp, #8
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002396:	d112      	bne.n	80023be <HAL_SPI_Receive+0x44>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10e      	bne.n	80023be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2204      	movs	r2, #4
 80023a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023a8:	88fa      	ldrh	r2, [r7, #6]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f8f1 	bl	800259c <HAL_SPI_TransmitReceive>
 80023ba:	4603      	mov	r3, r0
 80023bc:	e0ea      	b.n	8002594 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_SPI_Receive+0x52>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e0e3      	b.n	8002594 <HAL_SPI_Receive+0x21a>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023d4:	f7fe feb0 	bl	8001138 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d002      	beq.n	80023ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023ea:	e0ca      	b.n	8002582 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_SPI_Receive+0x7e>
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023fc:	e0c1      	b.n	8002582 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2204      	movs	r2, #4
 8002402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002444:	d10f      	bne.n	8002466 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d007      	beq.n	8002484 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d162      	bne.n	8002552 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800248c:	e02e      	b.n	80024ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d115      	bne.n	80024c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f103 020c 	add.w	r2, r3, #12
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024c6:	e011      	b.n	80024ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024c8:	f7fe fe36 	bl	8001138 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d803      	bhi.n	80024e0 <HAL_SPI_Receive+0x166>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d102      	bne.n	80024e6 <HAL_SPI_Receive+0x16c>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d102      	bne.n	80024ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024ea:	e04a      	b.n	8002582 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1cb      	bne.n	800248e <HAL_SPI_Receive+0x114>
 80024f6:	e031      	b.n	800255c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d113      	bne.n	800252e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	b292      	uxth	r2, r2
 8002512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	1c9a      	adds	r2, r3, #2
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800252c:	e011      	b.n	8002552 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252e:	f7fe fe03 	bl	8001138 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d803      	bhi.n	8002546 <HAL_SPI_Receive+0x1cc>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d102      	bne.n	800254c <HAL_SPI_Receive+0x1d2>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002550:	e017      	b.n	8002582 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1cd      	bne.n	80024f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa45 	bl	80029f0 <SPI_EndRxTransaction>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
 800257e:	e000      	b.n	8002582 <HAL_SPI_Receive+0x208>
  }

error :
 8002580:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002592:	7dfb      	ldrb	r3, [r7, #23]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025aa:	2301      	movs	r3, #1
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x26>
 80025be:	2302      	movs	r3, #2
 80025c0:	e18a      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x33c>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025ca:	f7fe fdb5 	bl	8001138 <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d00f      	beq.n	800260c <HAL_SPI_TransmitReceive+0x70>
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f2:	d107      	bne.n	8002604 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <HAL_SPI_TransmitReceive+0x68>
 80025fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002600:	2b04      	cmp	r3, #4
 8002602:	d003      	beq.n	800260c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002604:	2302      	movs	r3, #2
 8002606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800260a:	e15b      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_SPI_TransmitReceive+0x82>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_SPI_TransmitReceive+0x82>
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d103      	bne.n	8002626 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002624:	e14e      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b04      	cmp	r3, #4
 8002630:	d003      	beq.n	800263a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2205      	movs	r2, #5
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	887a      	ldrh	r2, [r7, #2]
 800264a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	887a      	ldrh	r2, [r7, #2]
 8002662:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d007      	beq.n	800268e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002696:	d178      	bne.n	800278a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x10a>
 80026a0:	8b7b      	ldrh	r3, [r7, #26]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d166      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	881a      	ldrh	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	1c9a      	adds	r2, r3, #2
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ca:	e053      	b.n	8002774 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d11b      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x176>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x176>
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d113      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	881a      	ldrh	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	1c9a      	adds	r2, r3, #2
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d119      	bne.n	8002754 <HAL_SPI_TransmitReceive+0x1b8>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d014      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	b292      	uxth	r2, r2
 8002736:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	1c9a      	adds	r2, r3, #2
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002750:	2301      	movs	r3, #1
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002754:	f7fe fcf0 	bl	8001138 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002760:	429a      	cmp	r2, r3
 8002762:	d807      	bhi.n	8002774 <HAL_SPI_TransmitReceive+0x1d8>
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d003      	beq.n	8002774 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002772:	e0a7      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1a6      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x130>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1a1      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x130>
 8002788:	e07c      	b.n	8002884 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x1fc>
 8002792:	8b7b      	ldrh	r3, [r7, #26]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d16b      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	7812      	ldrb	r2, [r2, #0]
 80027a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027be:	e057      	b.n	8002870 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d11c      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x26c>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d017      	beq.n	8002808 <HAL_SPI_TransmitReceive+0x26c>
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d114      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d119      	bne.n	800284a <HAL_SPI_TransmitReceive+0x2ae>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d014      	beq.n	800284a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002846:	2301      	movs	r3, #1
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800284a:	f7fe fc75 	bl	8001138 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002856:	429a      	cmp	r2, r3
 8002858:	d803      	bhi.n	8002862 <HAL_SPI_TransmitReceive+0x2c6>
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d102      	bne.n	8002868 <HAL_SPI_TransmitReceive+0x2cc>
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800286e:	e029      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1a2      	bne.n	80027c0 <HAL_SPI_TransmitReceive+0x224>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d19d      	bne.n	80027c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f917 	bl	8002abc <SPI_EndRxTxTransaction>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028a0:	e010      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10b      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	e000      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3730      	adds	r7, #48	; 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028f0:	f7fe fc22 	bl	8001138 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002900:	f7fe fc1a 	bl	8001138 <HAL_GetTick>
 8002904:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	015b      	lsls	r3, r3, #5
 800290c:	0d1b      	lsrs	r3, r3, #20
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002916:	e054      	b.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d050      	beq.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002920:	f7fe fc0a 	bl	8001138 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	429a      	cmp	r2, r3
 800292e:	d902      	bls.n	8002936 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d13d      	bne.n	80029b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002944:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294e:	d111      	bne.n	8002974 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002958:	d004      	beq.n	8002964 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002962:	d107      	bne.n	8002974 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297c:	d10f      	bne.n	800299e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800299c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e017      	b.n	80029e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3b01      	subs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4013      	ands	r3, r2
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	bf0c      	ite	eq
 80029d2:	2301      	moveq	r3, #1
 80029d4:	2300      	movne	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d19b      	bne.n	8002918 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000040 	.word	0x20000040

080029f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a04:	d111      	bne.n	8002a2a <SPI_EndRxTransaction+0x3a>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0e:	d004      	beq.n	8002a1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a18:	d107      	bne.n	8002a2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a32:	d12a      	bne.n	8002a8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3c:	d012      	beq.n	8002a64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2180      	movs	r1, #128	; 0x80
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff ff49 	bl	80028e0 <SPI_WaitFlagStateUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d02d      	beq.n	8002ab0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e026      	b.n	8002ab2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff ff36 	bl	80028e0 <SPI_WaitFlagStateUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01a      	beq.n	8002ab0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e013      	b.n	8002ab2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2200      	movs	r2, #0
 8002a92:	2101      	movs	r1, #1
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff ff23 	bl	80028e0 <SPI_WaitFlagStateUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <SPI_EndRxTxTransaction+0x7c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <SPI_EndRxTxTransaction+0x80>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0d5b      	lsrs	r3, r3, #21
 8002ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae6:	d112      	bne.n	8002b0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7ff fef4 	bl	80028e0 <SPI_WaitFlagStateUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f043 0220 	orr.w	r2, r3, #32
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e00f      	b.n	8002b2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d0f2      	beq.n	8002b0e <SPI_EndRxTxTransaction+0x52>
 8002b28:	e000      	b.n	8002b2c <SPI_EndRxTxTransaction+0x70>
        break;
 8002b2a:	bf00      	nop
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000040 	.word	0x20000040
 8002b3c:	165e9f81 	.word	0x165e9f81

08002b40 <__errno>:
 8002b40:	4b01      	ldr	r3, [pc, #4]	; (8002b48 <__errno+0x8>)
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	2000004c 	.word	0x2000004c

08002b4c <__libc_init_array>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	4d0d      	ldr	r5, [pc, #52]	; (8002b84 <__libc_init_array+0x38>)
 8002b50:	4c0d      	ldr	r4, [pc, #52]	; (8002b88 <__libc_init_array+0x3c>)
 8002b52:	1b64      	subs	r4, r4, r5
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	2600      	movs	r6, #0
 8002b58:	42a6      	cmp	r6, r4
 8002b5a:	d109      	bne.n	8002b70 <__libc_init_array+0x24>
 8002b5c:	4d0b      	ldr	r5, [pc, #44]	; (8002b8c <__libc_init_array+0x40>)
 8002b5e:	4c0c      	ldr	r4, [pc, #48]	; (8002b90 <__libc_init_array+0x44>)
 8002b60:	f000 fc4e 	bl	8003400 <_init>
 8002b64:	1b64      	subs	r4, r4, r5
 8002b66:	10a4      	asrs	r4, r4, #2
 8002b68:	2600      	movs	r6, #0
 8002b6a:	42a6      	cmp	r6, r4
 8002b6c:	d105      	bne.n	8002b7a <__libc_init_array+0x2e>
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b74:	4798      	blx	r3
 8002b76:	3601      	adds	r6, #1
 8002b78:	e7ee      	b.n	8002b58 <__libc_init_array+0xc>
 8002b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7e:	4798      	blx	r3
 8002b80:	3601      	adds	r6, #1
 8002b82:	e7f2      	b.n	8002b6a <__libc_init_array+0x1e>
 8002b84:	080034b4 	.word	0x080034b4
 8002b88:	080034b4 	.word	0x080034b4
 8002b8c:	080034b4 	.word	0x080034b4
 8002b90:	080034b8 	.word	0x080034b8

08002b94 <memset>:
 8002b94:	4402      	add	r2, r0
 8002b96:	4603      	mov	r3, r0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <memset+0xa>
 8002b9c:	4770      	bx	lr
 8002b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba2:	e7f9      	b.n	8002b98 <memset+0x4>

08002ba4 <siprintf>:
 8002ba4:	b40e      	push	{r1, r2, r3}
 8002ba6:	b500      	push	{lr}
 8002ba8:	b09c      	sub	sp, #112	; 0x70
 8002baa:	ab1d      	add	r3, sp, #116	; 0x74
 8002bac:	9002      	str	r0, [sp, #8]
 8002bae:	9006      	str	r0, [sp, #24]
 8002bb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bb4:	4809      	ldr	r0, [pc, #36]	; (8002bdc <siprintf+0x38>)
 8002bb6:	9107      	str	r1, [sp, #28]
 8002bb8:	9104      	str	r1, [sp, #16]
 8002bba:	4909      	ldr	r1, [pc, #36]	; (8002be0 <siprintf+0x3c>)
 8002bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bc0:	9105      	str	r1, [sp, #20]
 8002bc2:	6800      	ldr	r0, [r0, #0]
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	a902      	add	r1, sp, #8
 8002bc8:	f000 f868 	bl	8002c9c <_svfiprintf_r>
 8002bcc:	9b02      	ldr	r3, [sp, #8]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	b01c      	add	sp, #112	; 0x70
 8002bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bd8:	b003      	add	sp, #12
 8002bda:	4770      	bx	lr
 8002bdc:	2000004c 	.word	0x2000004c
 8002be0:	ffff0208 	.word	0xffff0208

08002be4 <__ssputs_r>:
 8002be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be8:	688e      	ldr	r6, [r1, #8]
 8002bea:	429e      	cmp	r6, r3
 8002bec:	4682      	mov	sl, r0
 8002bee:	460c      	mov	r4, r1
 8002bf0:	4690      	mov	r8, r2
 8002bf2:	461f      	mov	r7, r3
 8002bf4:	d838      	bhi.n	8002c68 <__ssputs_r+0x84>
 8002bf6:	898a      	ldrh	r2, [r1, #12]
 8002bf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bfc:	d032      	beq.n	8002c64 <__ssputs_r+0x80>
 8002bfe:	6825      	ldr	r5, [r4, #0]
 8002c00:	6909      	ldr	r1, [r1, #16]
 8002c02:	eba5 0901 	sub.w	r9, r5, r1
 8002c06:	6965      	ldr	r5, [r4, #20]
 8002c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c10:	3301      	adds	r3, #1
 8002c12:	444b      	add	r3, r9
 8002c14:	106d      	asrs	r5, r5, #1
 8002c16:	429d      	cmp	r5, r3
 8002c18:	bf38      	it	cc
 8002c1a:	461d      	movcc	r5, r3
 8002c1c:	0553      	lsls	r3, r2, #21
 8002c1e:	d531      	bpl.n	8002c84 <__ssputs_r+0xa0>
 8002c20:	4629      	mov	r1, r5
 8002c22:	f000 fb47 	bl	80032b4 <_malloc_r>
 8002c26:	4606      	mov	r6, r0
 8002c28:	b950      	cbnz	r0, 8002c40 <__ssputs_r+0x5c>
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	f8ca 3000 	str.w	r3, [sl]
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c36:	81a3      	strh	r3, [r4, #12]
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c40:	6921      	ldr	r1, [r4, #16]
 8002c42:	464a      	mov	r2, r9
 8002c44:	f000 fabe 	bl	80031c4 <memcpy>
 8002c48:	89a3      	ldrh	r3, [r4, #12]
 8002c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c52:	81a3      	strh	r3, [r4, #12]
 8002c54:	6126      	str	r6, [r4, #16]
 8002c56:	6165      	str	r5, [r4, #20]
 8002c58:	444e      	add	r6, r9
 8002c5a:	eba5 0509 	sub.w	r5, r5, r9
 8002c5e:	6026      	str	r6, [r4, #0]
 8002c60:	60a5      	str	r5, [r4, #8]
 8002c62:	463e      	mov	r6, r7
 8002c64:	42be      	cmp	r6, r7
 8002c66:	d900      	bls.n	8002c6a <__ssputs_r+0x86>
 8002c68:	463e      	mov	r6, r7
 8002c6a:	4632      	mov	r2, r6
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	4641      	mov	r1, r8
 8002c70:	f000 fab6 	bl	80031e0 <memmove>
 8002c74:	68a3      	ldr	r3, [r4, #8]
 8002c76:	6822      	ldr	r2, [r4, #0]
 8002c78:	1b9b      	subs	r3, r3, r6
 8002c7a:	4432      	add	r2, r6
 8002c7c:	60a3      	str	r3, [r4, #8]
 8002c7e:	6022      	str	r2, [r4, #0]
 8002c80:	2000      	movs	r0, #0
 8002c82:	e7db      	b.n	8002c3c <__ssputs_r+0x58>
 8002c84:	462a      	mov	r2, r5
 8002c86:	f000 fb6f 	bl	8003368 <_realloc_r>
 8002c8a:	4606      	mov	r6, r0
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d1e1      	bne.n	8002c54 <__ssputs_r+0x70>
 8002c90:	6921      	ldr	r1, [r4, #16]
 8002c92:	4650      	mov	r0, sl
 8002c94:	f000 fabe 	bl	8003214 <_free_r>
 8002c98:	e7c7      	b.n	8002c2a <__ssputs_r+0x46>
	...

08002c9c <_svfiprintf_r>:
 8002c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca0:	4698      	mov	r8, r3
 8002ca2:	898b      	ldrh	r3, [r1, #12]
 8002ca4:	061b      	lsls	r3, r3, #24
 8002ca6:	b09d      	sub	sp, #116	; 0x74
 8002ca8:	4607      	mov	r7, r0
 8002caa:	460d      	mov	r5, r1
 8002cac:	4614      	mov	r4, r2
 8002cae:	d50e      	bpl.n	8002cce <_svfiprintf_r+0x32>
 8002cb0:	690b      	ldr	r3, [r1, #16]
 8002cb2:	b963      	cbnz	r3, 8002cce <_svfiprintf_r+0x32>
 8002cb4:	2140      	movs	r1, #64	; 0x40
 8002cb6:	f000 fafd 	bl	80032b4 <_malloc_r>
 8002cba:	6028      	str	r0, [r5, #0]
 8002cbc:	6128      	str	r0, [r5, #16]
 8002cbe:	b920      	cbnz	r0, 8002cca <_svfiprintf_r+0x2e>
 8002cc0:	230c      	movs	r3, #12
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	e0d1      	b.n	8002e6e <_svfiprintf_r+0x1d2>
 8002cca:	2340      	movs	r3, #64	; 0x40
 8002ccc:	616b      	str	r3, [r5, #20]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cdc:	2330      	movs	r3, #48	; 0x30
 8002cde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002e88 <_svfiprintf_r+0x1ec>
 8002ce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ce6:	f04f 0901 	mov.w	r9, #1
 8002cea:	4623      	mov	r3, r4
 8002cec:	469a      	mov	sl, r3
 8002cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cf2:	b10a      	cbz	r2, 8002cf8 <_svfiprintf_r+0x5c>
 8002cf4:	2a25      	cmp	r2, #37	; 0x25
 8002cf6:	d1f9      	bne.n	8002cec <_svfiprintf_r+0x50>
 8002cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8002cfc:	d00b      	beq.n	8002d16 <_svfiprintf_r+0x7a>
 8002cfe:	465b      	mov	r3, fp
 8002d00:	4622      	mov	r2, r4
 8002d02:	4629      	mov	r1, r5
 8002d04:	4638      	mov	r0, r7
 8002d06:	f7ff ff6d 	bl	8002be4 <__ssputs_r>
 8002d0a:	3001      	adds	r0, #1
 8002d0c:	f000 80aa 	beq.w	8002e64 <_svfiprintf_r+0x1c8>
 8002d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d12:	445a      	add	r2, fp
 8002d14:	9209      	str	r2, [sp, #36]	; 0x24
 8002d16:	f89a 3000 	ldrb.w	r3, [sl]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80a2 	beq.w	8002e64 <_svfiprintf_r+0x1c8>
 8002d20:	2300      	movs	r3, #0
 8002d22:	f04f 32ff 	mov.w	r2, #4294967295
 8002d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d2a:	f10a 0a01 	add.w	sl, sl, #1
 8002d2e:	9304      	str	r3, [sp, #16]
 8002d30:	9307      	str	r3, [sp, #28]
 8002d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d36:	931a      	str	r3, [sp, #104]	; 0x68
 8002d38:	4654      	mov	r4, sl
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d40:	4851      	ldr	r0, [pc, #324]	; (8002e88 <_svfiprintf_r+0x1ec>)
 8002d42:	f7fd fa5d 	bl	8000200 <memchr>
 8002d46:	9a04      	ldr	r2, [sp, #16]
 8002d48:	b9d8      	cbnz	r0, 8002d82 <_svfiprintf_r+0xe6>
 8002d4a:	06d0      	lsls	r0, r2, #27
 8002d4c:	bf44      	itt	mi
 8002d4e:	2320      	movmi	r3, #32
 8002d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d54:	0711      	lsls	r1, r2, #28
 8002d56:	bf44      	itt	mi
 8002d58:	232b      	movmi	r3, #43	; 0x2b
 8002d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d62:	2b2a      	cmp	r3, #42	; 0x2a
 8002d64:	d015      	beq.n	8002d92 <_svfiprintf_r+0xf6>
 8002d66:	9a07      	ldr	r2, [sp, #28]
 8002d68:	4654      	mov	r4, sl
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f04f 0c0a 	mov.w	ip, #10
 8002d70:	4621      	mov	r1, r4
 8002d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d76:	3b30      	subs	r3, #48	; 0x30
 8002d78:	2b09      	cmp	r3, #9
 8002d7a:	d94e      	bls.n	8002e1a <_svfiprintf_r+0x17e>
 8002d7c:	b1b0      	cbz	r0, 8002dac <_svfiprintf_r+0x110>
 8002d7e:	9207      	str	r2, [sp, #28]
 8002d80:	e014      	b.n	8002dac <_svfiprintf_r+0x110>
 8002d82:	eba0 0308 	sub.w	r3, r0, r8
 8002d86:	fa09 f303 	lsl.w	r3, r9, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	9304      	str	r3, [sp, #16]
 8002d8e:	46a2      	mov	sl, r4
 8002d90:	e7d2      	b.n	8002d38 <_svfiprintf_r+0x9c>
 8002d92:	9b03      	ldr	r3, [sp, #12]
 8002d94:	1d19      	adds	r1, r3, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	9103      	str	r1, [sp, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bfbb      	ittet	lt
 8002d9e:	425b      	neglt	r3, r3
 8002da0:	f042 0202 	orrlt.w	r2, r2, #2
 8002da4:	9307      	strge	r3, [sp, #28]
 8002da6:	9307      	strlt	r3, [sp, #28]
 8002da8:	bfb8      	it	lt
 8002daa:	9204      	strlt	r2, [sp, #16]
 8002dac:	7823      	ldrb	r3, [r4, #0]
 8002dae:	2b2e      	cmp	r3, #46	; 0x2e
 8002db0:	d10c      	bne.n	8002dcc <_svfiprintf_r+0x130>
 8002db2:	7863      	ldrb	r3, [r4, #1]
 8002db4:	2b2a      	cmp	r3, #42	; 0x2a
 8002db6:	d135      	bne.n	8002e24 <_svfiprintf_r+0x188>
 8002db8:	9b03      	ldr	r3, [sp, #12]
 8002dba:	1d1a      	adds	r2, r3, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	9203      	str	r2, [sp, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bfb8      	it	lt
 8002dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002dc8:	3402      	adds	r4, #2
 8002dca:	9305      	str	r3, [sp, #20]
 8002dcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002e98 <_svfiprintf_r+0x1fc>
 8002dd0:	7821      	ldrb	r1, [r4, #0]
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	4650      	mov	r0, sl
 8002dd6:	f7fd fa13 	bl	8000200 <memchr>
 8002dda:	b140      	cbz	r0, 8002dee <_svfiprintf_r+0x152>
 8002ddc:	2340      	movs	r3, #64	; 0x40
 8002dde:	eba0 000a 	sub.w	r0, r0, sl
 8002de2:	fa03 f000 	lsl.w	r0, r3, r0
 8002de6:	9b04      	ldr	r3, [sp, #16]
 8002de8:	4303      	orrs	r3, r0
 8002dea:	3401      	adds	r4, #1
 8002dec:	9304      	str	r3, [sp, #16]
 8002dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002df2:	4826      	ldr	r0, [pc, #152]	; (8002e8c <_svfiprintf_r+0x1f0>)
 8002df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002df8:	2206      	movs	r2, #6
 8002dfa:	f7fd fa01 	bl	8000200 <memchr>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d038      	beq.n	8002e74 <_svfiprintf_r+0x1d8>
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <_svfiprintf_r+0x1f4>)
 8002e04:	bb1b      	cbnz	r3, 8002e4e <_svfiprintf_r+0x1b2>
 8002e06:	9b03      	ldr	r3, [sp, #12]
 8002e08:	3307      	adds	r3, #7
 8002e0a:	f023 0307 	bic.w	r3, r3, #7
 8002e0e:	3308      	adds	r3, #8
 8002e10:	9303      	str	r3, [sp, #12]
 8002e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e14:	4433      	add	r3, r6
 8002e16:	9309      	str	r3, [sp, #36]	; 0x24
 8002e18:	e767      	b.n	8002cea <_svfiprintf_r+0x4e>
 8002e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e1e:	460c      	mov	r4, r1
 8002e20:	2001      	movs	r0, #1
 8002e22:	e7a5      	b.n	8002d70 <_svfiprintf_r+0xd4>
 8002e24:	2300      	movs	r3, #0
 8002e26:	3401      	adds	r4, #1
 8002e28:	9305      	str	r3, [sp, #20]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f04f 0c0a 	mov.w	ip, #10
 8002e30:	4620      	mov	r0, r4
 8002e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e36:	3a30      	subs	r2, #48	; 0x30
 8002e38:	2a09      	cmp	r2, #9
 8002e3a:	d903      	bls.n	8002e44 <_svfiprintf_r+0x1a8>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0c5      	beq.n	8002dcc <_svfiprintf_r+0x130>
 8002e40:	9105      	str	r1, [sp, #20]
 8002e42:	e7c3      	b.n	8002dcc <_svfiprintf_r+0x130>
 8002e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e48:	4604      	mov	r4, r0
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e7f0      	b.n	8002e30 <_svfiprintf_r+0x194>
 8002e4e:	ab03      	add	r3, sp, #12
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	462a      	mov	r2, r5
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <_svfiprintf_r+0x1f8>)
 8002e56:	a904      	add	r1, sp, #16
 8002e58:	4638      	mov	r0, r7
 8002e5a:	f3af 8000 	nop.w
 8002e5e:	1c42      	adds	r2, r0, #1
 8002e60:	4606      	mov	r6, r0
 8002e62:	d1d6      	bne.n	8002e12 <_svfiprintf_r+0x176>
 8002e64:	89ab      	ldrh	r3, [r5, #12]
 8002e66:	065b      	lsls	r3, r3, #25
 8002e68:	f53f af2c 	bmi.w	8002cc4 <_svfiprintf_r+0x28>
 8002e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e6e:	b01d      	add	sp, #116	; 0x74
 8002e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e74:	ab03      	add	r3, sp, #12
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	462a      	mov	r2, r5
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <_svfiprintf_r+0x1f8>)
 8002e7c:	a904      	add	r1, sp, #16
 8002e7e:	4638      	mov	r0, r7
 8002e80:	f000 f87a 	bl	8002f78 <_printf_i>
 8002e84:	e7eb      	b.n	8002e5e <_svfiprintf_r+0x1c2>
 8002e86:	bf00      	nop
 8002e88:	08003478 	.word	0x08003478
 8002e8c:	08003482 	.word	0x08003482
 8002e90:	00000000 	.word	0x00000000
 8002e94:	08002be5 	.word	0x08002be5
 8002e98:	0800347e 	.word	0x0800347e

08002e9c <_printf_common>:
 8002e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ea0:	4616      	mov	r6, r2
 8002ea2:	4699      	mov	r9, r3
 8002ea4:	688a      	ldr	r2, [r1, #8]
 8002ea6:	690b      	ldr	r3, [r1, #16]
 8002ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bfb8      	it	lt
 8002eb0:	4613      	movlt	r3, r2
 8002eb2:	6033      	str	r3, [r6, #0]
 8002eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002eb8:	4607      	mov	r7, r0
 8002eba:	460c      	mov	r4, r1
 8002ebc:	b10a      	cbz	r2, 8002ec2 <_printf_common+0x26>
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	6033      	str	r3, [r6, #0]
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	0699      	lsls	r1, r3, #26
 8002ec6:	bf42      	ittt	mi
 8002ec8:	6833      	ldrmi	r3, [r6, #0]
 8002eca:	3302      	addmi	r3, #2
 8002ecc:	6033      	strmi	r3, [r6, #0]
 8002ece:	6825      	ldr	r5, [r4, #0]
 8002ed0:	f015 0506 	ands.w	r5, r5, #6
 8002ed4:	d106      	bne.n	8002ee4 <_printf_common+0x48>
 8002ed6:	f104 0a19 	add.w	sl, r4, #25
 8002eda:	68e3      	ldr	r3, [r4, #12]
 8002edc:	6832      	ldr	r2, [r6, #0]
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	42ab      	cmp	r3, r5
 8002ee2:	dc26      	bgt.n	8002f32 <_printf_common+0x96>
 8002ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ee8:	1e13      	subs	r3, r2, #0
 8002eea:	6822      	ldr	r2, [r4, #0]
 8002eec:	bf18      	it	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	0692      	lsls	r2, r2, #26
 8002ef2:	d42b      	bmi.n	8002f4c <_printf_common+0xb0>
 8002ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ef8:	4649      	mov	r1, r9
 8002efa:	4638      	mov	r0, r7
 8002efc:	47c0      	blx	r8
 8002efe:	3001      	adds	r0, #1
 8002f00:	d01e      	beq.n	8002f40 <_printf_common+0xa4>
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	68e5      	ldr	r5, [r4, #12]
 8002f06:	6832      	ldr	r2, [r6, #0]
 8002f08:	f003 0306 	and.w	r3, r3, #6
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	bf08      	it	eq
 8002f10:	1aad      	subeq	r5, r5, r2
 8002f12:	68a3      	ldr	r3, [r4, #8]
 8002f14:	6922      	ldr	r2, [r4, #16]
 8002f16:	bf0c      	ite	eq
 8002f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f1c:	2500      	movne	r5, #0
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	bfc4      	itt	gt
 8002f22:	1a9b      	subgt	r3, r3, r2
 8002f24:	18ed      	addgt	r5, r5, r3
 8002f26:	2600      	movs	r6, #0
 8002f28:	341a      	adds	r4, #26
 8002f2a:	42b5      	cmp	r5, r6
 8002f2c:	d11a      	bne.n	8002f64 <_printf_common+0xc8>
 8002f2e:	2000      	movs	r0, #0
 8002f30:	e008      	b.n	8002f44 <_printf_common+0xa8>
 8002f32:	2301      	movs	r3, #1
 8002f34:	4652      	mov	r2, sl
 8002f36:	4649      	mov	r1, r9
 8002f38:	4638      	mov	r0, r7
 8002f3a:	47c0      	blx	r8
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	d103      	bne.n	8002f48 <_printf_common+0xac>
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f48:	3501      	adds	r5, #1
 8002f4a:	e7c6      	b.n	8002eda <_printf_common+0x3e>
 8002f4c:	18e1      	adds	r1, r4, r3
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	2030      	movs	r0, #48	; 0x30
 8002f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f56:	4422      	add	r2, r4
 8002f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f60:	3302      	adds	r3, #2
 8002f62:	e7c7      	b.n	8002ef4 <_printf_common+0x58>
 8002f64:	2301      	movs	r3, #1
 8002f66:	4622      	mov	r2, r4
 8002f68:	4649      	mov	r1, r9
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	47c0      	blx	r8
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d0e6      	beq.n	8002f40 <_printf_common+0xa4>
 8002f72:	3601      	adds	r6, #1
 8002f74:	e7d9      	b.n	8002f2a <_printf_common+0x8e>
	...

08002f78 <_printf_i>:
 8002f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	4691      	mov	r9, r2
 8002f80:	7e27      	ldrb	r7, [r4, #24]
 8002f82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f84:	2f78      	cmp	r7, #120	; 0x78
 8002f86:	4680      	mov	r8, r0
 8002f88:	469a      	mov	sl, r3
 8002f8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f8e:	d807      	bhi.n	8002fa0 <_printf_i+0x28>
 8002f90:	2f62      	cmp	r7, #98	; 0x62
 8002f92:	d80a      	bhi.n	8002faa <_printf_i+0x32>
 8002f94:	2f00      	cmp	r7, #0
 8002f96:	f000 80d8 	beq.w	800314a <_printf_i+0x1d2>
 8002f9a:	2f58      	cmp	r7, #88	; 0x58
 8002f9c:	f000 80a3 	beq.w	80030e6 <_printf_i+0x16e>
 8002fa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fa8:	e03a      	b.n	8003020 <_printf_i+0xa8>
 8002faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fae:	2b15      	cmp	r3, #21
 8002fb0:	d8f6      	bhi.n	8002fa0 <_printf_i+0x28>
 8002fb2:	a001      	add	r0, pc, #4	; (adr r0, 8002fb8 <_printf_i+0x40>)
 8002fb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fb8:	08003011 	.word	0x08003011
 8002fbc:	08003025 	.word	0x08003025
 8002fc0:	08002fa1 	.word	0x08002fa1
 8002fc4:	08002fa1 	.word	0x08002fa1
 8002fc8:	08002fa1 	.word	0x08002fa1
 8002fcc:	08002fa1 	.word	0x08002fa1
 8002fd0:	08003025 	.word	0x08003025
 8002fd4:	08002fa1 	.word	0x08002fa1
 8002fd8:	08002fa1 	.word	0x08002fa1
 8002fdc:	08002fa1 	.word	0x08002fa1
 8002fe0:	08002fa1 	.word	0x08002fa1
 8002fe4:	08003131 	.word	0x08003131
 8002fe8:	08003055 	.word	0x08003055
 8002fec:	08003113 	.word	0x08003113
 8002ff0:	08002fa1 	.word	0x08002fa1
 8002ff4:	08002fa1 	.word	0x08002fa1
 8002ff8:	08003153 	.word	0x08003153
 8002ffc:	08002fa1 	.word	0x08002fa1
 8003000:	08003055 	.word	0x08003055
 8003004:	08002fa1 	.word	0x08002fa1
 8003008:	08002fa1 	.word	0x08002fa1
 800300c:	0800311b 	.word	0x0800311b
 8003010:	680b      	ldr	r3, [r1, #0]
 8003012:	1d1a      	adds	r2, r3, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	600a      	str	r2, [r1, #0]
 8003018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800301c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003020:	2301      	movs	r3, #1
 8003022:	e0a3      	b.n	800316c <_printf_i+0x1f4>
 8003024:	6825      	ldr	r5, [r4, #0]
 8003026:	6808      	ldr	r0, [r1, #0]
 8003028:	062e      	lsls	r6, r5, #24
 800302a:	f100 0304 	add.w	r3, r0, #4
 800302e:	d50a      	bpl.n	8003046 <_printf_i+0xce>
 8003030:	6805      	ldr	r5, [r0, #0]
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	2d00      	cmp	r5, #0
 8003036:	da03      	bge.n	8003040 <_printf_i+0xc8>
 8003038:	232d      	movs	r3, #45	; 0x2d
 800303a:	426d      	negs	r5, r5
 800303c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003040:	485e      	ldr	r0, [pc, #376]	; (80031bc <_printf_i+0x244>)
 8003042:	230a      	movs	r3, #10
 8003044:	e019      	b.n	800307a <_printf_i+0x102>
 8003046:	f015 0f40 	tst.w	r5, #64	; 0x40
 800304a:	6805      	ldr	r5, [r0, #0]
 800304c:	600b      	str	r3, [r1, #0]
 800304e:	bf18      	it	ne
 8003050:	b22d      	sxthne	r5, r5
 8003052:	e7ef      	b.n	8003034 <_printf_i+0xbc>
 8003054:	680b      	ldr	r3, [r1, #0]
 8003056:	6825      	ldr	r5, [r4, #0]
 8003058:	1d18      	adds	r0, r3, #4
 800305a:	6008      	str	r0, [r1, #0]
 800305c:	0628      	lsls	r0, r5, #24
 800305e:	d501      	bpl.n	8003064 <_printf_i+0xec>
 8003060:	681d      	ldr	r5, [r3, #0]
 8003062:	e002      	b.n	800306a <_printf_i+0xf2>
 8003064:	0669      	lsls	r1, r5, #25
 8003066:	d5fb      	bpl.n	8003060 <_printf_i+0xe8>
 8003068:	881d      	ldrh	r5, [r3, #0]
 800306a:	4854      	ldr	r0, [pc, #336]	; (80031bc <_printf_i+0x244>)
 800306c:	2f6f      	cmp	r7, #111	; 0x6f
 800306e:	bf0c      	ite	eq
 8003070:	2308      	moveq	r3, #8
 8003072:	230a      	movne	r3, #10
 8003074:	2100      	movs	r1, #0
 8003076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800307a:	6866      	ldr	r6, [r4, #4]
 800307c:	60a6      	str	r6, [r4, #8]
 800307e:	2e00      	cmp	r6, #0
 8003080:	bfa2      	ittt	ge
 8003082:	6821      	ldrge	r1, [r4, #0]
 8003084:	f021 0104 	bicge.w	r1, r1, #4
 8003088:	6021      	strge	r1, [r4, #0]
 800308a:	b90d      	cbnz	r5, 8003090 <_printf_i+0x118>
 800308c:	2e00      	cmp	r6, #0
 800308e:	d04d      	beq.n	800312c <_printf_i+0x1b4>
 8003090:	4616      	mov	r6, r2
 8003092:	fbb5 f1f3 	udiv	r1, r5, r3
 8003096:	fb03 5711 	mls	r7, r3, r1, r5
 800309a:	5dc7      	ldrb	r7, [r0, r7]
 800309c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030a0:	462f      	mov	r7, r5
 80030a2:	42bb      	cmp	r3, r7
 80030a4:	460d      	mov	r5, r1
 80030a6:	d9f4      	bls.n	8003092 <_printf_i+0x11a>
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d10b      	bne.n	80030c4 <_printf_i+0x14c>
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	07df      	lsls	r7, r3, #31
 80030b0:	d508      	bpl.n	80030c4 <_printf_i+0x14c>
 80030b2:	6923      	ldr	r3, [r4, #16]
 80030b4:	6861      	ldr	r1, [r4, #4]
 80030b6:	4299      	cmp	r1, r3
 80030b8:	bfde      	ittt	le
 80030ba:	2330      	movle	r3, #48	; 0x30
 80030bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030c4:	1b92      	subs	r2, r2, r6
 80030c6:	6122      	str	r2, [r4, #16]
 80030c8:	f8cd a000 	str.w	sl, [sp]
 80030cc:	464b      	mov	r3, r9
 80030ce:	aa03      	add	r2, sp, #12
 80030d0:	4621      	mov	r1, r4
 80030d2:	4640      	mov	r0, r8
 80030d4:	f7ff fee2 	bl	8002e9c <_printf_common>
 80030d8:	3001      	adds	r0, #1
 80030da:	d14c      	bne.n	8003176 <_printf_i+0x1fe>
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	b004      	add	sp, #16
 80030e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e6:	4835      	ldr	r0, [pc, #212]	; (80031bc <_printf_i+0x244>)
 80030e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	680e      	ldr	r6, [r1, #0]
 80030f0:	061f      	lsls	r7, r3, #24
 80030f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80030f6:	600e      	str	r6, [r1, #0]
 80030f8:	d514      	bpl.n	8003124 <_printf_i+0x1ac>
 80030fa:	07d9      	lsls	r1, r3, #31
 80030fc:	bf44      	itt	mi
 80030fe:	f043 0320 	orrmi.w	r3, r3, #32
 8003102:	6023      	strmi	r3, [r4, #0]
 8003104:	b91d      	cbnz	r5, 800310e <_printf_i+0x196>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	f023 0320 	bic.w	r3, r3, #32
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	2310      	movs	r3, #16
 8003110:	e7b0      	b.n	8003074 <_printf_i+0xfc>
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	f043 0320 	orr.w	r3, r3, #32
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	2378      	movs	r3, #120	; 0x78
 800311c:	4828      	ldr	r0, [pc, #160]	; (80031c0 <_printf_i+0x248>)
 800311e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003122:	e7e3      	b.n	80030ec <_printf_i+0x174>
 8003124:	065e      	lsls	r6, r3, #25
 8003126:	bf48      	it	mi
 8003128:	b2ad      	uxthmi	r5, r5
 800312a:	e7e6      	b.n	80030fa <_printf_i+0x182>
 800312c:	4616      	mov	r6, r2
 800312e:	e7bb      	b.n	80030a8 <_printf_i+0x130>
 8003130:	680b      	ldr	r3, [r1, #0]
 8003132:	6826      	ldr	r6, [r4, #0]
 8003134:	6960      	ldr	r0, [r4, #20]
 8003136:	1d1d      	adds	r5, r3, #4
 8003138:	600d      	str	r5, [r1, #0]
 800313a:	0635      	lsls	r5, r6, #24
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	d501      	bpl.n	8003144 <_printf_i+0x1cc>
 8003140:	6018      	str	r0, [r3, #0]
 8003142:	e002      	b.n	800314a <_printf_i+0x1d2>
 8003144:	0671      	lsls	r1, r6, #25
 8003146:	d5fb      	bpl.n	8003140 <_printf_i+0x1c8>
 8003148:	8018      	strh	r0, [r3, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	6123      	str	r3, [r4, #16]
 800314e:	4616      	mov	r6, r2
 8003150:	e7ba      	b.n	80030c8 <_printf_i+0x150>
 8003152:	680b      	ldr	r3, [r1, #0]
 8003154:	1d1a      	adds	r2, r3, #4
 8003156:	600a      	str	r2, [r1, #0]
 8003158:	681e      	ldr	r6, [r3, #0]
 800315a:	6862      	ldr	r2, [r4, #4]
 800315c:	2100      	movs	r1, #0
 800315e:	4630      	mov	r0, r6
 8003160:	f7fd f84e 	bl	8000200 <memchr>
 8003164:	b108      	cbz	r0, 800316a <_printf_i+0x1f2>
 8003166:	1b80      	subs	r0, r0, r6
 8003168:	6060      	str	r0, [r4, #4]
 800316a:	6863      	ldr	r3, [r4, #4]
 800316c:	6123      	str	r3, [r4, #16]
 800316e:	2300      	movs	r3, #0
 8003170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003174:	e7a8      	b.n	80030c8 <_printf_i+0x150>
 8003176:	6923      	ldr	r3, [r4, #16]
 8003178:	4632      	mov	r2, r6
 800317a:	4649      	mov	r1, r9
 800317c:	4640      	mov	r0, r8
 800317e:	47d0      	blx	sl
 8003180:	3001      	adds	r0, #1
 8003182:	d0ab      	beq.n	80030dc <_printf_i+0x164>
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	079b      	lsls	r3, r3, #30
 8003188:	d413      	bmi.n	80031b2 <_printf_i+0x23a>
 800318a:	68e0      	ldr	r0, [r4, #12]
 800318c:	9b03      	ldr	r3, [sp, #12]
 800318e:	4298      	cmp	r0, r3
 8003190:	bfb8      	it	lt
 8003192:	4618      	movlt	r0, r3
 8003194:	e7a4      	b.n	80030e0 <_printf_i+0x168>
 8003196:	2301      	movs	r3, #1
 8003198:	4632      	mov	r2, r6
 800319a:	4649      	mov	r1, r9
 800319c:	4640      	mov	r0, r8
 800319e:	47d0      	blx	sl
 80031a0:	3001      	adds	r0, #1
 80031a2:	d09b      	beq.n	80030dc <_printf_i+0x164>
 80031a4:	3501      	adds	r5, #1
 80031a6:	68e3      	ldr	r3, [r4, #12]
 80031a8:	9903      	ldr	r1, [sp, #12]
 80031aa:	1a5b      	subs	r3, r3, r1
 80031ac:	42ab      	cmp	r3, r5
 80031ae:	dcf2      	bgt.n	8003196 <_printf_i+0x21e>
 80031b0:	e7eb      	b.n	800318a <_printf_i+0x212>
 80031b2:	2500      	movs	r5, #0
 80031b4:	f104 0619 	add.w	r6, r4, #25
 80031b8:	e7f5      	b.n	80031a6 <_printf_i+0x22e>
 80031ba:	bf00      	nop
 80031bc:	08003489 	.word	0x08003489
 80031c0:	0800349a 	.word	0x0800349a

080031c4 <memcpy>:
 80031c4:	440a      	add	r2, r1
 80031c6:	4291      	cmp	r1, r2
 80031c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80031cc:	d100      	bne.n	80031d0 <memcpy+0xc>
 80031ce:	4770      	bx	lr
 80031d0:	b510      	push	{r4, lr}
 80031d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031da:	4291      	cmp	r1, r2
 80031dc:	d1f9      	bne.n	80031d2 <memcpy+0xe>
 80031de:	bd10      	pop	{r4, pc}

080031e0 <memmove>:
 80031e0:	4288      	cmp	r0, r1
 80031e2:	b510      	push	{r4, lr}
 80031e4:	eb01 0402 	add.w	r4, r1, r2
 80031e8:	d902      	bls.n	80031f0 <memmove+0x10>
 80031ea:	4284      	cmp	r4, r0
 80031ec:	4623      	mov	r3, r4
 80031ee:	d807      	bhi.n	8003200 <memmove+0x20>
 80031f0:	1e43      	subs	r3, r0, #1
 80031f2:	42a1      	cmp	r1, r4
 80031f4:	d008      	beq.n	8003208 <memmove+0x28>
 80031f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031fe:	e7f8      	b.n	80031f2 <memmove+0x12>
 8003200:	4402      	add	r2, r0
 8003202:	4601      	mov	r1, r0
 8003204:	428a      	cmp	r2, r1
 8003206:	d100      	bne.n	800320a <memmove+0x2a>
 8003208:	bd10      	pop	{r4, pc}
 800320a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800320e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003212:	e7f7      	b.n	8003204 <memmove+0x24>

08003214 <_free_r>:
 8003214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003216:	2900      	cmp	r1, #0
 8003218:	d048      	beq.n	80032ac <_free_r+0x98>
 800321a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800321e:	9001      	str	r0, [sp, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f1a1 0404 	sub.w	r4, r1, #4
 8003226:	bfb8      	it	lt
 8003228:	18e4      	addlt	r4, r4, r3
 800322a:	f000 f8d3 	bl	80033d4 <__malloc_lock>
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <_free_r+0x9c>)
 8003230:	9801      	ldr	r0, [sp, #4]
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	4615      	mov	r5, r2
 8003236:	b933      	cbnz	r3, 8003246 <_free_r+0x32>
 8003238:	6063      	str	r3, [r4, #4]
 800323a:	6014      	str	r4, [r2, #0]
 800323c:	b003      	add	sp, #12
 800323e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003242:	f000 b8cd 	b.w	80033e0 <__malloc_unlock>
 8003246:	42a3      	cmp	r3, r4
 8003248:	d90b      	bls.n	8003262 <_free_r+0x4e>
 800324a:	6821      	ldr	r1, [r4, #0]
 800324c:	1862      	adds	r2, r4, r1
 800324e:	4293      	cmp	r3, r2
 8003250:	bf04      	itt	eq
 8003252:	681a      	ldreq	r2, [r3, #0]
 8003254:	685b      	ldreq	r3, [r3, #4]
 8003256:	6063      	str	r3, [r4, #4]
 8003258:	bf04      	itt	eq
 800325a:	1852      	addeq	r2, r2, r1
 800325c:	6022      	streq	r2, [r4, #0]
 800325e:	602c      	str	r4, [r5, #0]
 8003260:	e7ec      	b.n	800323c <_free_r+0x28>
 8003262:	461a      	mov	r2, r3
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	b10b      	cbz	r3, 800326c <_free_r+0x58>
 8003268:	42a3      	cmp	r3, r4
 800326a:	d9fa      	bls.n	8003262 <_free_r+0x4e>
 800326c:	6811      	ldr	r1, [r2, #0]
 800326e:	1855      	adds	r5, r2, r1
 8003270:	42a5      	cmp	r5, r4
 8003272:	d10b      	bne.n	800328c <_free_r+0x78>
 8003274:	6824      	ldr	r4, [r4, #0]
 8003276:	4421      	add	r1, r4
 8003278:	1854      	adds	r4, r2, r1
 800327a:	42a3      	cmp	r3, r4
 800327c:	6011      	str	r1, [r2, #0]
 800327e:	d1dd      	bne.n	800323c <_free_r+0x28>
 8003280:	681c      	ldr	r4, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	6053      	str	r3, [r2, #4]
 8003286:	4421      	add	r1, r4
 8003288:	6011      	str	r1, [r2, #0]
 800328a:	e7d7      	b.n	800323c <_free_r+0x28>
 800328c:	d902      	bls.n	8003294 <_free_r+0x80>
 800328e:	230c      	movs	r3, #12
 8003290:	6003      	str	r3, [r0, #0]
 8003292:	e7d3      	b.n	800323c <_free_r+0x28>
 8003294:	6825      	ldr	r5, [r4, #0]
 8003296:	1961      	adds	r1, r4, r5
 8003298:	428b      	cmp	r3, r1
 800329a:	bf04      	itt	eq
 800329c:	6819      	ldreq	r1, [r3, #0]
 800329e:	685b      	ldreq	r3, [r3, #4]
 80032a0:	6063      	str	r3, [r4, #4]
 80032a2:	bf04      	itt	eq
 80032a4:	1949      	addeq	r1, r1, r5
 80032a6:	6021      	streq	r1, [r4, #0]
 80032a8:	6054      	str	r4, [r2, #4]
 80032aa:	e7c7      	b.n	800323c <_free_r+0x28>
 80032ac:	b003      	add	sp, #12
 80032ae:	bd30      	pop	{r4, r5, pc}
 80032b0:	200000d0 	.word	0x200000d0

080032b4 <_malloc_r>:
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b6:	1ccd      	adds	r5, r1, #3
 80032b8:	f025 0503 	bic.w	r5, r5, #3
 80032bc:	3508      	adds	r5, #8
 80032be:	2d0c      	cmp	r5, #12
 80032c0:	bf38      	it	cc
 80032c2:	250c      	movcc	r5, #12
 80032c4:	2d00      	cmp	r5, #0
 80032c6:	4606      	mov	r6, r0
 80032c8:	db01      	blt.n	80032ce <_malloc_r+0x1a>
 80032ca:	42a9      	cmp	r1, r5
 80032cc:	d903      	bls.n	80032d6 <_malloc_r+0x22>
 80032ce:	230c      	movs	r3, #12
 80032d0:	6033      	str	r3, [r6, #0]
 80032d2:	2000      	movs	r0, #0
 80032d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d6:	f000 f87d 	bl	80033d4 <__malloc_lock>
 80032da:	4921      	ldr	r1, [pc, #132]	; (8003360 <_malloc_r+0xac>)
 80032dc:	680a      	ldr	r2, [r1, #0]
 80032de:	4614      	mov	r4, r2
 80032e0:	b99c      	cbnz	r4, 800330a <_malloc_r+0x56>
 80032e2:	4f20      	ldr	r7, [pc, #128]	; (8003364 <_malloc_r+0xb0>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	b923      	cbnz	r3, 80032f2 <_malloc_r+0x3e>
 80032e8:	4621      	mov	r1, r4
 80032ea:	4630      	mov	r0, r6
 80032ec:	f000 f862 	bl	80033b4 <_sbrk_r>
 80032f0:	6038      	str	r0, [r7, #0]
 80032f2:	4629      	mov	r1, r5
 80032f4:	4630      	mov	r0, r6
 80032f6:	f000 f85d 	bl	80033b4 <_sbrk_r>
 80032fa:	1c43      	adds	r3, r0, #1
 80032fc:	d123      	bne.n	8003346 <_malloc_r+0x92>
 80032fe:	230c      	movs	r3, #12
 8003300:	6033      	str	r3, [r6, #0]
 8003302:	4630      	mov	r0, r6
 8003304:	f000 f86c 	bl	80033e0 <__malloc_unlock>
 8003308:	e7e3      	b.n	80032d2 <_malloc_r+0x1e>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	1b5b      	subs	r3, r3, r5
 800330e:	d417      	bmi.n	8003340 <_malloc_r+0x8c>
 8003310:	2b0b      	cmp	r3, #11
 8003312:	d903      	bls.n	800331c <_malloc_r+0x68>
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	441c      	add	r4, r3
 8003318:	6025      	str	r5, [r4, #0]
 800331a:	e004      	b.n	8003326 <_malloc_r+0x72>
 800331c:	6863      	ldr	r3, [r4, #4]
 800331e:	42a2      	cmp	r2, r4
 8003320:	bf0c      	ite	eq
 8003322:	600b      	streq	r3, [r1, #0]
 8003324:	6053      	strne	r3, [r2, #4]
 8003326:	4630      	mov	r0, r6
 8003328:	f000 f85a 	bl	80033e0 <__malloc_unlock>
 800332c:	f104 000b 	add.w	r0, r4, #11
 8003330:	1d23      	adds	r3, r4, #4
 8003332:	f020 0007 	bic.w	r0, r0, #7
 8003336:	1ac2      	subs	r2, r0, r3
 8003338:	d0cc      	beq.n	80032d4 <_malloc_r+0x20>
 800333a:	1a1b      	subs	r3, r3, r0
 800333c:	50a3      	str	r3, [r4, r2]
 800333e:	e7c9      	b.n	80032d4 <_malloc_r+0x20>
 8003340:	4622      	mov	r2, r4
 8003342:	6864      	ldr	r4, [r4, #4]
 8003344:	e7cc      	b.n	80032e0 <_malloc_r+0x2c>
 8003346:	1cc4      	adds	r4, r0, #3
 8003348:	f024 0403 	bic.w	r4, r4, #3
 800334c:	42a0      	cmp	r0, r4
 800334e:	d0e3      	beq.n	8003318 <_malloc_r+0x64>
 8003350:	1a21      	subs	r1, r4, r0
 8003352:	4630      	mov	r0, r6
 8003354:	f000 f82e 	bl	80033b4 <_sbrk_r>
 8003358:	3001      	adds	r0, #1
 800335a:	d1dd      	bne.n	8003318 <_malloc_r+0x64>
 800335c:	e7cf      	b.n	80032fe <_malloc_r+0x4a>
 800335e:	bf00      	nop
 8003360:	200000d0 	.word	0x200000d0
 8003364:	200000d4 	.word	0x200000d4

08003368 <_realloc_r>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	4607      	mov	r7, r0
 800336c:	4614      	mov	r4, r2
 800336e:	460e      	mov	r6, r1
 8003370:	b921      	cbnz	r1, 800337c <_realloc_r+0x14>
 8003372:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003376:	4611      	mov	r1, r2
 8003378:	f7ff bf9c 	b.w	80032b4 <_malloc_r>
 800337c:	b922      	cbnz	r2, 8003388 <_realloc_r+0x20>
 800337e:	f7ff ff49 	bl	8003214 <_free_r>
 8003382:	4625      	mov	r5, r4
 8003384:	4628      	mov	r0, r5
 8003386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003388:	f000 f830 	bl	80033ec <_malloc_usable_size_r>
 800338c:	42a0      	cmp	r0, r4
 800338e:	d20f      	bcs.n	80033b0 <_realloc_r+0x48>
 8003390:	4621      	mov	r1, r4
 8003392:	4638      	mov	r0, r7
 8003394:	f7ff ff8e 	bl	80032b4 <_malloc_r>
 8003398:	4605      	mov	r5, r0
 800339a:	2800      	cmp	r0, #0
 800339c:	d0f2      	beq.n	8003384 <_realloc_r+0x1c>
 800339e:	4631      	mov	r1, r6
 80033a0:	4622      	mov	r2, r4
 80033a2:	f7ff ff0f 	bl	80031c4 <memcpy>
 80033a6:	4631      	mov	r1, r6
 80033a8:	4638      	mov	r0, r7
 80033aa:	f7ff ff33 	bl	8003214 <_free_r>
 80033ae:	e7e9      	b.n	8003384 <_realloc_r+0x1c>
 80033b0:	4635      	mov	r5, r6
 80033b2:	e7e7      	b.n	8003384 <_realloc_r+0x1c>

080033b4 <_sbrk_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4d06      	ldr	r5, [pc, #24]	; (80033d0 <_sbrk_r+0x1c>)
 80033b8:	2300      	movs	r3, #0
 80033ba:	4604      	mov	r4, r0
 80033bc:	4608      	mov	r0, r1
 80033be:	602b      	str	r3, [r5, #0]
 80033c0:	f7fd fde2 	bl	8000f88 <_sbrk>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_sbrk_r+0x1a>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_sbrk_r+0x1a>
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	200001cc 	.word	0x200001cc

080033d4 <__malloc_lock>:
 80033d4:	4801      	ldr	r0, [pc, #4]	; (80033dc <__malloc_lock+0x8>)
 80033d6:	f000 b811 	b.w	80033fc <__retarget_lock_acquire_recursive>
 80033da:	bf00      	nop
 80033dc:	200001d4 	.word	0x200001d4

080033e0 <__malloc_unlock>:
 80033e0:	4801      	ldr	r0, [pc, #4]	; (80033e8 <__malloc_unlock+0x8>)
 80033e2:	f000 b80c 	b.w	80033fe <__retarget_lock_release_recursive>
 80033e6:	bf00      	nop
 80033e8:	200001d4 	.word	0x200001d4

080033ec <_malloc_usable_size_r>:
 80033ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033f0:	1f18      	subs	r0, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bfbc      	itt	lt
 80033f6:	580b      	ldrlt	r3, [r1, r0]
 80033f8:	18c0      	addlt	r0, r0, r3
 80033fa:	4770      	bx	lr

080033fc <__retarget_lock_acquire_recursive>:
 80033fc:	4770      	bx	lr

080033fe <__retarget_lock_release_recursive>:
 80033fe:	4770      	bx	lr

08003400 <_init>:
 8003400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003402:	bf00      	nop
 8003404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003406:	bc08      	pop	{r3}
 8003408:	469e      	mov	lr, r3
 800340a:	4770      	bx	lr

0800340c <_fini>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	bf00      	nop
 8003410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003412:	bc08      	pop	{r3}
 8003414:	469e      	mov	lr, r3
 8003416:	4770      	bx	lr
